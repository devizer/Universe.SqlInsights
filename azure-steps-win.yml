# AGENT_OS=Linux|Darwin|Windows_NT
# condition: eq(variables['Agent.OS'], 'Linux|Darwin|Windows_NT')

steps:

  - pwsh: |
      . scripts\Measure-Action.ps1
      # Measure-Action "List Package Providers" {Get-PackageProvider -ListAvailable}
      # Get-PackageProvider -ListAvailable
      # Measure-Action "Install Nuget Package Provider" {Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force}
      # Measure-Action "Install PowerShellGet" {Install-Module PowerShellGet -AllowClobber -Force}
      Measure-Action "Install the Platform-Info module" {Install-Module Platform-Info -Force}

      Write-Host "Latest Version of Platform-Info: '$((Find-Module Platform-Info -EA SilentlyContinue).Version)'"
      Write-Host "Installed Version of Platform-Info: '$((Get-InstalledModule Platform-Info -EA SilentlyContinue).Version)'"

      Write-Host "CPU: $(Get-Cpu-Name)"
      Write-Host "Platform: $(Get-Os-Platform)"
      Write-Host "Memory $((Get-Memory-Info).Description)"
    displayName: 'Bootstrap pwsh'

  - bash: |
     script=https://raw.githubusercontent.com/devizer/test-and-build/master/install-build-tools-bundle.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash >/dev/null
     for v in 5.0 6.0 7.0 8.0-preview 8.0-preview-windowsservercore-ltsc2022; do
       Say "ASP.NET $v"
       try-and-retry try-and-retry docker manifest inspect mcr.microsoft.com/dotnet/aspnet:$v
     done 
     true
    displayName: "Docker ispect images"

  - powershell: |
      (Get-Counter -ListSet *).Paths | Where-Object { $_ -like "*Transfers*" }
    displayName: 'List Perfmormance Counters'

  - powershell: |
      Get-Counter -Counter "\PhysicalDisk(_total)\Disk Transfers/sec" -SampleInterval 1 -MaxSamples 7
      $true
    displayName: 'Show Transfer for 20 seconds'

  - powershell: 'Set-NetFirewallProfile -All -Enabled False; netsh advfirewall set currentprofile state off; "ok?";'
    displayName: "Disable firefall"

  - script: |
      echo $vars=$ENV:PATH.Split(';'); [System.Array]::Sort($vars); foreach ($p in $vars) { echo $p; } | powershell -c -
      echo.
      echo %PATH%
      echo.
      powershell -c "nuget help | Select -First 1; msbuild /version | Select -First 1;"
      exit 0;
      if exist "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\amd64" Set PATH=C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\amd64;%PATH%;
      echo "##vso[task.setvariable variable=PATH]%PATH%"
      exit 0
    condition: eq(variables['Agent.OS'], 'Windows_NT')
    displayName: "PATH's Patch"

  - bash: |
      powershell -f scripts/Uninstall-Stuff.ps1 || true
    condition: ne(variables['UNINSTALL_TRASH'], '')
    displayName: 'UNINSTALL TRASH'

  - bash: |
      set -eu; set -o pipefail;
      script=https://raw.githubusercontent.com/devizer/test-and-build/master/install-build-tools-bundle.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash >/dev/null
      Say --Reset-Stopwatch
      Say "CPU: $(Get-CpuName)"
      git clone https://github.com/devizer/Universe.SqlServerJam ~/jam
      cd ~/jam/src/Universe.SqlServerJam.Tests

      ls -la
      dotnet test -c Release -f $W3API_NET
      Say Done
    condition: succeededOrFailed()
    displayName: 'Test JAM'

  - bash: |
      powershell -f scripts/Create-Windows-Ram-Disk.ps1 || true
    condition: ne(variables['RAM_DISK'], '')
    displayName: 'RAM Disk'

  - powershell: |
      $file="$($Env:SYSTEM_ARTIFACTSDIRECTORY)\Win32_Product (MSI Dump).txt"
      get-wmiobject Win32_Product | sort -Property Vendor, Version | Format-Table IdentifyingNumber, Vendor, Version, Name, LocalPackage -AutoSize | Out-File -Width 4444 "$file"
      cat $file
    condition: False
    # condition: ne(variables['MSI_DUMP'], '')
    displayName: 'MSI DUMP'

  - publish: $(SYSTEM.ARTIFACTSDIRECTORY)
    displayName: 'Publish MSI DUMP'
    condition: ne(variables['MSI_DUMP'], '')
    artifact: 'MSI DUMP $(Agent.JobName)'

  - bash: |
      script=https://raw.githubusercontent.com/devizer/test-and-build/master/install-build-tools-bundle.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash >/dev/null
      Say --Reset-Stopwatch
      Say "CPU: $(Get-CpuName)"

      echo "Bash Version: $BASH_VERSION"
      for cmd in date jq tee cat tr node yarn npm dotnet head grep awk sed; do
        echo "'$cmd' path: [$(command -v "$cmd")]"
        echo "'$cmd' version: [$("$cmd" --version | head -1)]"
      done
      
      echo "'sqlcmd' path: [$(command -v sqlcmd)]"
      echo "'sqlcmd' version: [$(sqlcmd -? | head -2 | tr '\n' ' ' | tr '\r' ' ' | tr '  ' ' ')]"
      
      echo "'taskkill' path: [$(command -v taskkill)]"

      echo "'msbuild' path: [$(command -v msbuild)]"
      echo "'msbuild' version: [$(msbuild | head -1)]"

      for csc in 'Framework\v2.0.50727' 'Framework\v3.5' 'Framework\v4.0.30319' 'Framework64/v2.0.50727' 'Framework64/v3.5' 'Framework64/v4.0.30319'; do
        here="-"
        fullpath='C:\Windows\Microsoft.NET\'"$csc\\csc.exe"
        if [[ -s "$fullpath" ]]; then here="Yes"; fi
        echo "'$fullpath': $here"
      done

      echo "Seconds since the Epoch: $(date +%s)"

      true
    displayName: 'Show'

  - powershell: |
       $ErrorActionPreference = "SilentlyContinue"
       
       $nuget = nuget help | select -First 1
       Write-Host "NUGET: $nuget"
       $msbuild = msbuild help | select -First 1
       Write-Host "MSBUILD: $msbuild"

       & dotnet --info
       "PATH: [" + [Environment]::GetEnvironmentVariable("PATH") + "]"
       & bash -c "Say ENVIRONMENT; printenv | sort"; $true

       pushd "C:\Program Files (x86)\Microsoft Visual Studio\"
       # & cmd /c dir /b /s
       popd
    displayName: 'system info (pwsh)'


  - powershell: |
       $Work="$($Env:LocalAppData)"; if ($Work -eq "") { $Work="$($Env:UserProfile)"; }; $Work="$Work\Temp\Sql-Installers"
       if (-not (Test-Path $Work)) { New-Item -ItemType Directory -Path $Work -EA SilentlyContinue | out-null }
       Write-Host "Downloading Bootstrap.ps1 to: $Work" -ForegroundColor Cyan
       (new-object System.Net.WebClient).DownloadFile('https://raw.githubusercontent.com/devizer/glist/master/bin/SQL-Express/Sql-Setup-Bootstrap.ps1', "$Work\Sql-Setup-Bootstrap.ps1")
       pushd $Work; . .\Sql-Setup-Bootstrap.ps1; popd

       Say "Target Sql Server Version <$(SQL)>"
       Show-SqlServers

       # $ErrorActionPreference = 'SilentlyContinue'
       # $Env:SQL_SETUP_LOG_FOLDER = "$(System.DefaultWorkingDirectory)/Setup.Logs"
       $Env:SQL_SETUP_LOG_FOLDER = "$($Env:SYSTEM_ARTIFACTSDIRECTORY)\SQL-Setup.Logs"
       Say "Creating log directory: '$($Env:SQL_SETUP_LOG_FOLDER)'"
       New-Item "$($Env:SQL_SETUP_LOG_FOLDER)" -type directory -force -EA SilentlyContinue 
       New-Item -ItemType Directory -Force -Path "$($Env:SQL_SETUP_LOG_FOLDER)" -ErrorAction Continue 

       $todo = Parse-SqlServers "$(SQL)"
       $todo | % { Install-SqlServer $_ }

       Show-SqlServers
       Say "ALL THE SQL SERVICES"
       get-wmiobject win32_service | where {$_.Name.ToLower().IndexOf("sql") -ge 0 -or $_.DisplayName.ToLower().IndexOf("sql") -ge 0 } | sort-object -Property "DisplayName" | ft State, Name, DisplayName, StartMode, StartName

       # Say "Copy log SQL-Setup.Logs"
       # cp "$($Env:Temp)\SQL-Setup.Logs" Setup.Logs -Force
    displayName: 'Prepare SQL Server'

  - powershell: |
      Get-Counter -Counter "\PhysicalDisk(_total)\Disk Transfers/sec" -SampleInterval 1 -MaxSamples 7
      $true
    displayName: 'Show Transfer for 20 seconds'

  - bash: |
       export SQL_SETUP_LOGS_FOLDER="$SYSTEM_ARTIFACTSDIRECTORY"
       powershell -f scripts/Publish-SQL-Server-Setup-Logs.ps1 || true
    condition: succeededOrFailed()
    displayName: 'Universal SQL Setup Logs'

  - script: |
       sqlcmd /? | find "Version"
       for %%a IN ("." "localhost,1433") DO (
        echo "TRY SERVER [%%a]"
        sqlcmd -S %%a -h-1 -s"," -E -W -w 10000 -Q "SET NOCOUNT ON; SELECT DATALENGTH(@@DBTS) as MYDBTS_LENGTH, @@DBTS as MYDBTS;"
        sqlcmd -S %%a -h-1 -s"," -E -W -w 10000 -Q "SET NOCOUNT ON; Select CONVERT(VARCHAR(128), SERVERPROPERTY ('productversion'))"
        sqlcmd -S %%a -h-1 -s"," -E -W -w 10000 -Q "SET NOCOUNT ON; Select @@Version"
        echo. && echo "CHECK Update ... Output"
        sqlcmd -S %%a -E -Q "Create Table Temp1(id int, rv ROWVERSION); Insert Into Temp1(id) Values(10); Update Top (1) Temp1 Set id=42 Output Inserted.Id as MyNewId;"
        echo.
       )
       true
    displayName: 'Show SQL Info'
  
  - task: PublishBuildArtifacts@1
    condition: succeededOrFailed()
    displayName: 'Publish SQL Setup Logs'
    inputs:
      pathtoPublish: '$(SYSTEM.ARTIFACTSDIRECTORY)'
      artifactName: '$(Agent.JobName) (SQL Setup Logs)'

  - bash: |
      dotnet --info
      cmd.exe /C "taskkill.exe /F /T /IM dotnet.exe"
      export DOTNET_VERSIONS="5.0 6.0 7.0"
      script=https://raw.githubusercontent.com/devizer/test-and-build/master/lab/install-DOTNET.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash; 
      dotnet --info
    condition: succeededOrFailed()
    displayName: '.NET Install'

  - task: DownloadPipelineArtifact@2
    condition: succeededOrFailed()
    displayName: 'w3app: download'
    inputs:
      artifactName: w3app
      path: $(Build.SourcesDirectory)/src/universe.sqlinsights.w3app/build
      patterns: 
        "**"

  - bash: |
      set -eu
      cd src/universe.sqlinsights.w3app
      cd build
      echo "SERVING STATIC W3APP. Content of ./static/js:"
      ls -la static/js
      dotnet serve --version 2>nul || dotnet tool install --global dotnet-serve
      dotnet serve --version
      start /max dotnet serve -p 6060 -o
    condition: eq(variables['Agent.OS'], 'Windows_NT')
    displayName: 'w3app: run'

  - script: |
      call 0a-Net-Restore-All.cmd
    condition: eq(variables['Agent.OS'], 'Windows_NT')
    displayName: 'dotnet restore'

  - powershell: |
      Get-Counter -Counter "\PhysicalDisk(_total)\Disk Transfers/sec" -SampleInterval 1 -MaxSamples 7
      $true
    displayName: 'Show Transfer for 20 seconds'

  - bash: |
      set -eu; set -o pipefail;
      export TEST_CPU_NAME="$(Get-CpuName --name-only)"
      export TEST_CONFIGURATION="DISK";
      if [[ -n "${DB_DATA_DIR:-}" ]]; then
        export SQLINSIGHTS_DATA_DIR="$DB_DATA_DIR"
        export TEST_CONFIGURATION="RAM-Disk"
        Say "SQLINSIGHTS_DATA_DIR is $SQLINSIGHTS_DATA_DIR"
      fi
      cd src/Universe.SqlInsights.SqlServerStorage.Tests
      export TEST_UNDER_COVERAGE=True
      dotnet test --collect:"XPlat Code Coverage" --logger trx -f $W3API_NET

      Say "Benchmark Seed"
      rm -f $SYSTEM_ARTIFACTSDIRECTORY/AddAction.log
      export TEST_UNDER_COVERAGE=False
      dotnet test -c Release -f $W3API_NET --filter "Name~Test1_Seed"
    condition: eq(variables['Agent.OS'], 'Windows_NT')
    displayName: 'TEST STORAGE +BENCHMARK'

  - script: |
      dir %DB_DATA_DIR%
      echo.
    condition: ne(variables['DB_DATA_DIR'], '')
    displayName: 'RAM Disk Usage'

  - powershell: |
      Get-Counter -Counter "\PhysicalDisk(_total)\Disk Transfers/sec" -SampleInterval 1 -MaxSamples 7
      $true
    displayName: 'Show Transfer for 7 seconds'

  - bash: |
      echo Starting W3Api
      export SQLINSIGHTS_REPORT_FOLDER="C:\\Temp\\SqlInsights-W3Api-Internal-Logs"
      export SQLINSIGHTS_REPORT_FULLNAME="${SQLINSIGHTS_REPORT_FOLDER}\\Report.Txt"
      pushd src/Universe.SqlInsights.W3Api;
      (dotnet run | tee "$SYSTEM_ARTIFACTSDIRECTORY/w3api (acceptance test).log") &
      popd
      sleep 15
      
      source scripts/wait_for_http.sh
      WAIT_HTTP_TIMEOUT=90
      Say "Waiting for swagger ...."
      wait_for_http "http://localhost:50420/swagger"
      
      # for acceptance test?
      sleep 60

      set -o pipefail
      Say "Final Test: get swagger"
      curl -I http://localhost:50420/swagger | cat || exit 666;
      Say "KILL W3API and W3APP"
      for proc in dotnet-serve.exe dotnet.exe; do cmd.exe /C "taskkill.exe /F /T /IM $proc"; done
      7z a "${SYSTEM_ARTIFACTSDIRECTORY}\\SqlInsights Report.7z" "${SQLINSIGHTS_REPORT_FOLDER}"
      (echo "CPU: $(Get-CpuName)"; echo "Job: ${AGENT_JOBNAME}"; cat "${SQLINSIGHTS_REPORT_FULLNAME}") > /tmp/report; cp -f /tmp/report "${SQLINSIGHTS_REPORT_FULLNAME}"
      cp -f "${SQLINSIGHTS_REPORT_FULLNAME}" "${SYSTEM_ARTIFACTSDIRECTORY}\\SqlInsights Report.txt"
      true
    condition: eq(variables['TEST_W3API'], 'true')
    displayName: 'RUN W3API (optional)'


  - bash: |
      set -eu; set -o pipefail;
      cd ~/jam/src/Universe.SqlServerJam.Tests

      dotnet test -c Release -f $W3API_NET
      Say Done
    condition: succeededOrFailed()
    displayName: 'Test JAM Again'


  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testRunner: VSTest
      testResultsFiles: '**/*.trx'
      testRunTitle: 'All the tests for $(Agent.JobName)'
      
  - task: PublishCodeCoverageResults@1
    condition: succeededOrFailed()
    inputs:
      codeCoverageTool: cobertura
      failIfCoverageEmpty: false # Optional      
      summaryFileLocation: '**/In/**/coverage.cobertura.xml'

  - publish: $(SYSTEM.ARTIFACTSDIRECTORY)
    displayName: 'Publish Artifact'
    condition: succeededOrFailed()
    artifact: 'Artifacts $(Agent.JobName)'
