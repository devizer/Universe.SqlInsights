# AGENT_OS=Linux|Darwin|Windows_NT
# condition: eq(variables['Agent.OS'], 'Linux|Darwin|Windows_NT')

steps:

  - script: |
      echo PATH1: %PATH%
      if exist "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\amd64" Set PATH=C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\amd64;%PATH%;
      echo "##vso[task.setvariable variable=PATH]%PATH%"
      powershell -c "nuget help | Select -First 1; msbuild /version | Select -First 1;"
      exit 0
    condition: eq(variables['Agent.OS'], 'Windows_NT')
    displayName: "PATH's Patch"

  - bash: |
      echo "Bash Version: $BASH_VERSION"
      for cmd in tr node yarn npm dotnet head grep awk sed; do
        echo "'$cmd' path: [$(command -v "$cmd")]"
        echo "'$cmd' version: [$("$cmd" --version | head -1)]"
      done
      echo "'sqlcmd' path: [$(command -v sqlcmd)]"
      echo "'sqlcmd' version: [$(sqlcmd -? | head -2 | tr '\n' ' ' | tr '\r' ' ' | tr '  ' ' ')]"
      echo "'taskkill' path: [$(command -v taskkill)]"
      true
    displayName: 'Show'

  - task: NodeTool@0 
    displayName: 'v16.x NodeJS' 
    inputs: 
      versionSpec: '16.x'  
      force32bit: false 
      # Optional checkLatest: false
  
  - bash: |
      node --version
      # choco install nvm -my
      # nvm install 14
      # choco install nodejs-lts --version=14.21.3 -my
      winget install -e --id OpenJS.NodeJS --version 14.14.0
      node --version

    displayName: 'NodeJS Install'
    

  - bash: |
      script=https://raw.githubusercontent.com/devizer/test-and-build/master/install-build-tools-bundle.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash
      Say --Reset-Stopwatch
      Say "CPU: $(Get-CpuName)"
      dotnet --info
      export DOTNET_VERSIONS="5.0 6.0 7.0"
      script=https://raw.githubusercontent.com/devizer/test-and-build/master/lab/install-DOTNET.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash; 
      dotnet --info
    displayName: '.NET Install'

  # - bash: |
  #     curl -o local-databaseengine-v15-x64.msi https://master.dl.sourceforge.net/project/db-engine/local-databaseengine-v15-x64.msi?viasf=1
  #   displayName: 'Test SF.NET 53Mb'

  # - bash: |
  #     curl -o v10.0.5500-x64.exe https://master.dl.sourceforge.net/project/db-engine/database-engine-x64-10.0.5500.exe?viasf=1
  #   displayName: 'Test2 SF.NET 113Mb'

    
  - powershell: |
       $ErrorActionPreference = "SilentlyContinue"
       
       $nuget = nuget help | select -First 1
       Write-Host "NUGET: $nuget"
       $msbuild = msbuild help | select -First 1
       Write-Host "MSBUILD: $msbuild"

       & dotnet --info
       "PATH: [" + [Environment]::GetEnvironmentVariable("PATH") + "]"
       & bash -c "Say ENVIRONMENT; printenv | sort"; $true

       pushd "C:\Program Files (x86)\Microsoft Visual Studio\"
       # & cmd /c dir /b /s
       popd
    displayName: 'system info (pwsh)'


  - powershell: |
       $Work="$($Env:LocalAppData)"; if ($Work -eq "") { $Work="$($Env:UserProfile)"; }; $Work="$Work\Temp\Sql-Installers"
       if (-not (Test-Path $Work)) { New-Item -ItemType Directory -Path $Work -EA SilentlyContinue | out-null }
       Write-Host "Downloading Bootstrap.ps1 to: $Work" -ForegroundColor Cyan
       (new-object System.Net.WebClient).DownloadFile('https://raw.githubusercontent.com/devizer/glist/master/bin/SQL-Express/Sql-Setup-Bootstrap.ps1', "$Work\Sql-Setup-Bootstrap.ps1")
       pushd $Work; . .\Sql-Setup-Bootstrap.ps1; popd

       Say "Target Sql Server Version <$(SQL)>"
       Show-SqlServers

       # $ErrorActionPreference = 'SilentlyContinue'
       # $Env:SQL_SETUP_LOG_FOLDER = "$(System.DefaultWorkingDirectory)/Setup.Logs"
       $Env:SQL_SETUP_LOG_FOLDER = "$($Env:Temp)\SQL-Setup.Logs"
       New-Item -ItemType Directory -Force -Path $Env:SQL_SETUP_LOG_FOLDER -ErrorAction Continue 1> $null

       $todo = Parse-SqlServers "$(SQL)"
       $todo | % { Install-SqlServer $_ }

       Show-SqlServers
       Say "ALL THE SQL SERVICES"
       get-wmiobject win32_service | where {$_.Name.ToLower().IndexOf("sql") -ge 0 -or $_.DisplayName.ToLower().IndexOf("sql") -ge 0 } | sort-object -Property "DisplayName" | ft State, Name, DisplayName, StartMode, StartName

       Say "Copy log SQL-Setup.Logs"
       cp "$($Env:Temp)\SQL-Setup.Logs" Setup.Logs -Force
    displayName: 'Prepare SQL Server'

  - script: |
       sqlcmd /? | find "Version"
       sqlcmd -S . -h-1 -s"," -E -W -w 10000 -Q "SET NOCOUNT ON; Select CONVERT(VARCHAR(128), SERVERPROPERTY ('productversion'))"
       sqlcmd -S . -h-1 -s"," -E -W -w 10000 -Q "SET NOCOUNT ON; Select @@Version"
    displayName: 'Show SQL Info'
  
  - publish: $(System.DefaultWorkingDirectory)/Setup.Logs
    condition: succeededOrFailed()
    displayName: 'Publish Setup.Logs'
    artifact: 'Setup.Logs-$(Agent.JobName)'
  
  - script: |
      call 0a-Net-Restore-All.cmd
    condition: eq(variables['Agent.OS'], 'Windows_NT')
    displayName: 'dotnet restore'

  - script: |
      call 0b-Net-Rebuild-All.cmd
      set -e
      cd src/Universe.SqlInsights.SqlServerStorage.Tests
      dotnet test --collect:"XPlat Code Coverage" --logger trx
    condition: eq(variables['Agent.OS'], 'Windows_NT')
    displayName: 'dotnet test SqlServerStorage'

  - script: |
      echo network-timeout 600000 >> %USERPROFILE%\.yarnrc
      pushd src\universe.sqlinsights.w3app
      If Not Exist node_modules (call yarn install)
      popd
    condition: eq(variables['Agent.OS'], 'Windows_NT')
    displayName: 'yarn install'

  - script: |
      call 2b-Build-and-Serve-SqlInsights-Prod.cmd
    condition: eq(variables['Agent.OS'], 'Windows_NT')
    displayName: 'yarn: build & run w3app'

  - bash: |
      echo Starting W3Api
      pushd src/Universe.SqlInsights.W3Api; 
      dotnet run &
      popd
      # 1-Run-W3Api.cmd
      # 2b-Build-and-Serve-SqlInsights-Prod.cmd
      sleep 15
      source scripts/wait_for_http.sh
      Say "Attempt #1: get swagger"
      curl -s -I http://localhost:50420/swagger
      Say "Waiting for swagger ...."
      wait_for_http "http://localhost:50420/swagger"
      # lets work more
      sleep 30
      Say "KILL W3API and W3APP"
      taskkill "/f" "/t" "/im" "dotnet.exe"
      taskkill "/f" "/t" "/im" "dotnet-serve.exe"
      Say "Final Test: get swagger"
      curl -s -I http://localhost:50420/swagger
    condition: eq(variables['TEST_APPS'], 'true')
    displayName: 'Test Apps (optional)'


  - publish: $(System.DefaultWorkingDirectory)
    condition: succeededOrFailed()
    artifact: 'Working-$(Agent.JobName)'
  
  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testRunner: VSTest
      testResultsFiles: '**/*.trx'
      testRunTitle: 'All the tests for $(Agent.JobName)'
      
  - task: PublishCodeCoverageResults@1
    condition: succeededOrFailed()
    inputs:
      codeCoverageTool: cobertura
      failIfCoverageEmpty: false # Optional      
      summaryFileLocation: '**/In/**/coverage.cobertura.xml'
