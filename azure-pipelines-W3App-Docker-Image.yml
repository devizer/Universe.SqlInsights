variables:
  Project: 'Universe.SqlInsights'
  TEST_W3API: true
  # Default image
  VMIMAGE: 'windows-2019'
  DEFAULT_RAM_DISK_SIZE: "1200"
  W3API_NET: net6.0
  COMPRESSION_LEVEL: 9
  SHORT_ARTIFACT_RIDS: ""
  # Also scripts\Linux-W3API-Docker-FXDependent\Dockerfile and rid=osx-arm64 in scripts\Build-Github-Release-Artifacts.sh

jobs:

  - job: Build_W3_App_Docker_Image
    displayName: 'W3API Linux Docker Image and GitHub Release'
    pool:
      vmImage: "ubuntu-20.04"

    steps:
      - bash: |
         set -eu; set -o pipefail
         script=https://raw.githubusercontent.com/devizer/test-and-build/master/install-build-tools-bundle.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash >/dev/null
         Say --Reset-Stopwatch; Say "CPU: $(Get-CpuName)"
         
         export SECOND_DISK_MODE=LOOP
         export RESET_FOLDERS_TO_RAID="/var/lib/apt;/var/lib/docker;$HOME/.nuget/packages;$HOME/.local/share/NuGet;/var/cache/apt;$SYSTEM_ARTIFACTSDIRECTORY;/tmp;/var/tmp"
         export LOOP_DIRECT_IO=off
         export MOVE_DOCKER_TO_RAID=""
         export FS=BTRFS-Compressed
         export BTRFS_COMPRESS_MODE=zstd:1
         url=https://raw.githubusercontent.com/devizer/glist/master/Raid0-on-Azure-Pipelines-Linux.sh; (wget -q -nv --no-check-certificate -O - $url 2>/dev/null || curl -ksSL $url) | bash
         echo "${RESET_FOLDERS_TO_RAID:-}" | awk -FFS=";" 'BEGIN{FS=";"}{for(i=1;i<=NF;i++){print $i}}' | while IFS= read -r folder; do
           echo "Permission to '$folder' folder"
           sudo chown -R $(whoami) "$folder"
         done

         sudo systemctl stop docker || true;
         sudo systemctl start docker || true;
         Say "VOLUMES"
         df -h -T

         sudo apt-get update -y -qq

         source scripts/Calc-Current-Version.sh
         
         mkdir -p "$SYSTEM_ARTIFACTSDIRECTORY/VERSION-ARTIFACT"
         printf $SQLINSIGHTS_VERSION > "$SYSTEM_ARTIFACTSDIRECTORY/VERSION-ARTIFACT/VERSION.TXT"

         docker login -u devizervlad -p "$PASSWORD1"
         echo "$PASSWORD2" | gh auth login --with-token

         Say "CONFIGURE DOCKER"
         docker pull -q multiarch/qemu-user-static
         docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
         sudo apt-get install qemu-user-static -y -qq | { grep "Setting" || true; }
         docker buildx create --name advancedx
         docker buildx use advancedx
         docker buildx inspect --bootstrap
         Say "Supported architectures"
         docker buildx ls

         echo ""; printenv | sort
        displayName: 'Bootstrap'
        env:
            PASSWORD1: $(DOCKER_PASSWORD)
            PASSWORD2: $(GITHUB_TOKEN)

      - publish: $(SYSTEM.ARTIFACTSDIRECTORY)/VERSION-ARTIFACT
        displayName: 'Publish *VERSION* Artifact'
        condition: succeededOrFailed()
        artifact: 'VERSION'
    
      - bash: |
         set -eu; set -o pipefail
         Say "CPU: $(Get-CpuName)"
         Say "SQLINSIGHTS_VERSION: [$SQLINSIGHTS_VERSION]"
         Say "SQLINSIGHTS_VERSION_SHORT: [$SQLINSIGHTS_VERSION_SHORT]"

         pushd scripts/Linux-W3App-Docker
           bash -e Build-W3App-Linux-Docker-Image.sh
         popd
        displayName: "w3app: Docker frontend image"

      - bash: |
         set -eu; set -o pipefail
         Say --Reset-Stopwatch; Say "CPU: $(Get-CpuName)"
         source scripts/Build-Github-Release-Artifacts.sh
        condition: succeededOrFailed()
        displayName: "W3API: GITHUB Release"
         

      - bash: |
         set -eu; set -o pipefail
         Say --Reset-Stopwatch; Say "CPU: $(Get-CpuName)"
         Say "SQLINSIGHTS_VERSION: [$SQLINSIGHTS_VERSION]"
         Say "SQLINSIGHTS_VERSION_SHORT: [$SQLINSIGHTS_VERSION_SHORT]"
         
         pushd scripts/Linux-W3API-Docker
         source Build-W3API-Linux-Docker-Image.sh
         popd
        # condition: succeededOrFailed()
        displayName: "W3API: SELF-CONTAINED Docker Images"

      - bash: |
         set -eu; set -o pipefail
         Say --Reset-Stopwatch; Say "CPU: $(Get-CpuName)"
         Say "SQLINSIGHTS_VERSION: [$SQLINSIGHTS_VERSION]"
         Say "SQLINSIGHTS_VERSION_SHORT: [$SQLINSIGHTS_VERSION_SHORT]"
         
         pushd scripts/Linux-W3API-Docker-FXDependent
         source Build-W3API-Linux-Docker-Image.sh
         popd
        # condition: succeededOrFailed()
        retryCountOnTaskFailure: 3
        displayName: "W3API: FXDependent Docker Images"

      - bash: Show-System-Stat
        condition: succeededOrFailed()
        displayName: 'Show-System-Stat'

      - publish: $(Build.SourcesDirectory)/src/universe.sqlinsights.w3app/build
        displayName: 'Publish w3app Artifact'
        condition: succeededOrFailed()
        artifact: 'w3app $(SQLINSIGHTS_VERSION)'
    
      - publish: $(SYSTEM.ARTIFACTSDIRECTORY)
        displayName: 'Publish Artifact (full)'
        condition: succeededOrFailed()
        artifact: '$(Agent.JobName)'


  - job: 'Windows_Nano_Server'
    displayName: 'Windows Docker Images'
    # condition: succeededOrFailed()
    pool:
      vmImage: 'windows-2022'
    timeoutInMinutes: 30
    dependsOn: Build_W3_App_Docker_Image

    steps: 
    - bash: |
        script=https://raw.githubusercontent.com/devizer/test-and-build/master/install-build-tools-bundle.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash >/dev/null
        Say --Reset-Stopwatch; Say "CPU: $(Get-CpuName)"
        docker login -u devizervlad -p "$PASSWORD1"
      displayName: 'Bootstrap'
      env:
          PASSWORD1: $(DOCKER_PASSWORD)
        

    - task: DownloadPipelineArtifact@2
      condition: succeededOrFailed()
      displayName: 'Download VERSION artifact'
      inputs:
        path: $(SYSTEM.ARTIFACTSDIRECTORY)
        patterns: 
          "**"

    - bash: |
        ls -laR "$SYSTEM_ARTIFACTSDIRECTORY"
      displayName: 'Show'

    - bash: |
        export SQLINSIGHTS_VERSION="$(cat "$SYSTEM_ARTIFACTSDIRECTORY/VERSION/VERSION.TXT")"
        Say "DOWNLOADING SQLINSIGHTS_VERSION='${SQLINSIGHTS_VERSION}'"
        url="https://github.com/devizer/Universe.SqlInsights/releases/download/$SQLINSIGHTS_VERSION/sqlinsights-dashboard-win-x64.7z"; 
        Say "URL: '$url'"
        curl -o ~/sqlinsights-dashboard-win-x64.7z -kSL "$url"
        7z x -y -oscripts/Windows-W3API-Docker ~/sqlinsights-dashboard-win-x64.7z
        # Say "Files in 'scripts/Windows-W3API-Docker'"
        # ls -la scripts/Windows-W3API-Docker

        Say "Starting docker images build ..."
        pushd scripts
        powershell -f Build-Windows-Docker-Image.ps1
        popd

      displayName: 'Build NANO SERVER Images'
      env:
          PASSWORD1: $(DOCKER_PASSWORD)


trigger:
  batch: false
  branches:
    include:
    - main
  paths:
    exclude:
    - '**'
    include:
    - 'azure-pipelines-W3App-Docker-Image.yml'
    - 'scripts/**'
