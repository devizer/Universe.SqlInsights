# AGENT_OS=Linux|Darwin|Windows_NT
# condition: eq(variables['Agent.OS'], 'Linux|Darwin|Windows_NT')

steps:


  - bash: |
      set -eu; set -o pipefail;
      script=https://raw.githubusercontent.com/devizer/test-and-build/master/install-build-tools-bundle.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash >/dev/null
      Say --Reset-Stopwatch
      Say "CPU: $(Get-CpuName)"
    displayName: 'Bootstrap'

  - bash: |
      set -eu; set -o pipefail;
      sudo mkdir -p "${RAM_DISK}"
      # -o size="{RAM_DISK_SIZE:-1500}"m 
      # Say "SKIPPING TMPFS on ${RAM_DISK}"

      # VERSION2
      kb="${RAM_DISK_SIZE:-1500}"; kb=$((kb*1024));
      sudo mkdir -p /mnt/ram-disk
      sudo mount -t tmpfs -o size="${kb}"k none /mnt/ram-disk
      sudo fallocate -l "$((kb-16))k" /mnt/ram-disk/ram-file
      sudo losetup --direct-io=off /dev/loop23 /mnt/ram-disk/ram-file
      sudo mkfs.ext4 /dev/loop23
      sudo mount -o defaults,noatime,nodiratime,commit=2000,barrier=0,data=writeback /dev/loop23 "${RAM_DISK}"

      sudo mkdir -p "${RAM_DISK}/DB"
      sudo chown -R "$(whoami)" "${RAM_DISK}"
      Say "Volumes"
      df -h -T
      free -m
    condition: ne(variables['RAM_DISK'], '')
    displayName: 'RAM Disk $(RAM_DISK)'

  - bash: |
      set -eu; set -o pipefail;
      v="";
      test -n "${RAM_DISK:-}" && v="-v ${RAM_DISK}:${RAM_DISK} -e 'MSSQL_DATA_DIR=${RAM_DISK}'"
      Say "volume options: [$v]"
      docker run --name sqlserver --privileged $v -e "ACCEPT_EULA=Y" -e "MSSQL_SA_PASSWORD=p@assw0rd!" -p 1433:1433 -d mcr.microsoft.com/mssql/server:"${SQL_IMAGE_TAG}"

      set +e
      Say "SQLCMD version:"
      docker exec -t sqlserver /opt/mssql-tools/bin/sqlcmd -? | head -3
      Say "Show data folder"
      docker exec -t sqlserver /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "p@assw0rd!" -Q "exec sp_databases; select * from sys.database_files;"
      Say "DOCKER ALIVE CONTAINERS"
      docker ps
      Say "DOCKER IMAGES"
      docker image ls
    condition: ne(variables['SQL_IMAGE_TAG'], '')
    displayName: 'SQL Server $(SQL_IMAGE_TAG)'

  - bash: |
      set -eu; set -o pipefail;
      docker logs sqlserver | cat | tr -d '\r' | grep -v -e "^$"
    condition: succeededOrFailed()
    displayName: 'SQL Server Logs'

  - bash: |
      set -eu; set -o pipefail;
      cd src/Universe.SqlInsights.SqlServerStorage.Tests
      dotnet restore || dotnet restore --disable-parallel
    condition: succeededOrFailed()
    displayName: 'Restore'

  - bash: |
      set -eu; set -o pipefail;
      cd src/Universe.SqlInsights.SqlServerStorage.Tests
      dotnet build -c Release --no-restore
    condition: succeededOrFailed()
    displayName: 'Build'

  - bash: |
      set -eu; set -o pipefail;
      cd src/Universe.SqlInsights.SqlServerStorage.Tests
      export SQLINSIGHTS_CONNECTION_STRING="Data Source=localhost,1433;User ID=sa;Password=p@assw0rd!"
      if [[ -n "${RAM_DISK:-}" ]]; then
        export SQLINSIGHTS_DATA_DIR="${RAM_DISK}/DB"
        sudo mkdir -p "$SQLINSIGHTS_DATA_DIR"
        Say "SQLINSIGHTS_DATA_DIR: [$SQLINSIGHTS_DATA_DIR]. TODO: mount it in a docker"
      fi
      dotnet test -c Release --no-build
    condition: succeededOrFailed()
    displayName: 'Test'

  - bash: |
      set -eu; set -o pipefail;
      docker logs sqlserver | cat | tr -d '\r' | grep -v -e "^$"
    condition: succeededOrFailed()
    displayName: 'SQL Server Logs'

  - bash: |
      set -eu; set -o pipefail;
      docker logs sqlserver | cat | tr -d '\r' | grep -v -e "^$"
      docker exec -t sqlserver cat /var/opt/mssql/log/errorlog | tr -d '\r'
    condition: succeededOrFailed()
    displayName: 'SQL Server Logs'

    

  - publish: $(SYSTEM.ARTIFACTSDIRECTORY)
    displayName: 'Publish Artifacts'
    condition: succeededOrFailed()
    artifact: '$(Agent.JobName)'


  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testRunner: VSTest
      testResultsFiles: '**/*.trx'
      testRunTitle: 'All the tests for $(Agent.JobName)'
      
  - task: PublishCodeCoverageResults@1
    condition: succeededOrFailed()
    inputs:
      codeCoverageTool: cobertura
      failIfCoverageEmpty: false # Optional      
      summaryFileLocation: '**/In/**/coverage.cobertura.xml'

