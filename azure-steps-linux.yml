# AGENT_OS=Linux|Darwin|Windows_NT
# condition: eq(variables['Agent.OS'], 'Linux|Darwin|Windows_NT')

steps:


  - bash: |
      set -eu; set -o pipefail;
      script=https://raw.githubusercontent.com/devizer/test-and-build/master/install-build-tools-bundle.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash >/dev/null
      Say --Reset-Stopwatch
      Say "CPU: $(Get-CpuName)"
    displayName: 'Bootstrap'

  - bash: |
      set -eu; set -o pipefail;
      sudo mkdir -p "${RAM_DISK}"
      # -o size="{RAM_DISK_SIZE:-1500}"m 
      sudo mount -t tmpfs none "${RAM_DISK}"
      sudo chown -R "$(whoami)" "${RAM_DISK}"
      Say "Volumes"
      df -h -T
      free -m
    condition: ne(variables['RAM_DISK'], '')
    displayName: 'RAM Disk $(RAM_DISK)'

  - bash: |
      set -eu; set -o pipefail;
      docker run -e "ACCEPT_EULA=Y" -e "MSSQL_SA_PASSWORD=p@assw0rd!" -p 1433:1433 -d mcr.microsoft.com/mssql/server:"${SQL_IMAGE_TAG}"
      docker ps
      docker image ls
    condition: ne(variables['SQL_IMAGE_TAG'], '')
    displayName: 'SQL Server $(SQL_IMAGE_TAG)'

  - bash: |
      set -eu; set -o pipefail;
      cd src/Universe.SqlInsights.SqlServerStorage.Tests
      dotnet restore || dotnet restore --disable-parallel
    condition: succeededOrFailed()
    displayName: 'Restore'

  - bash: |
      set -eu; set -o pipefail;
      cd src/Universe.SqlInsights.SqlServerStorage.Tests
      export SQLINSIGHTS_CONNECTION_STRING="Data Source=localhost,1433;User ID=sa;Password=p@assw0rd!"
      if [[ -n "${RAM_DISK:-}" ]]; then
        export SQLINSIGHTS_DATA_DIR="${RAM_DISK}/DB"
        sudo mkdir -p "$SQLINSIGHTS_DATA_DIR"
        Say "SQLINSIGHTS_DATA_DIR: [$SQLINSIGHTS_DATA_DIR]. TODO: mount it in a docker"
      fi
      dotnet test -c Release
    condition: succeededOrFailed()
    displayName: 'Test'

  - publish: $(SYSTEM.ARTIFACTSDIRECTORY)
    displayName: 'Publish Artifacts'
    condition: succeededOrFailed()
    artifact: '$(Agent.JobName)'


  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testRunner: VSTest
      testResultsFiles: '**/*.trx'
      testRunTitle: 'All the tests for $(Agent.JobName)'
      
  - task: PublishCodeCoverageResults@1
    condition: succeededOrFailed()
    inputs:
      codeCoverageTool: cobertura
      failIfCoverageEmpty: false # Optional      
      summaryFileLocation: '**/In/**/coverage.cobertura.xml'

