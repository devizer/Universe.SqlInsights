# AGENT_OS=Linux|Darwin|Windows_NT
# condition: eq(variables['Agent.OS'], 'Linux|Darwin|Windows_NT')

steps:

  - pwsh: |
      . scripts/Measure-Action.ps1
      # Measure-Action "List Package Providers" {Get-PackageProvider -ListAvailable}
      # Get-PackageProvider -ListAvailable
      # Measure-Action "Install Nuget Package Provider" {Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force}
      # Measure-Action "Install PowerShellGet" {Install-Module PowerShellGet -AllowClobber -Force}
      Measure-Action "Install the Platform-Info module" {Install-Module Platform-Info -Force}

      Write-Host "Latest Version of Platform-Info: '$((Find-Module Platform-Info -EA SilentlyContinue).Version)'"
      Write-Host "Installed Version of Platform-Info: '$((Get-InstalledModule Platform-Info -EA SilentlyContinue).Version)'"

      Write-Host "CPU: $(Get-Cpu-Name)"
      Write-Host "Platform: $(Get-Os-Platform)"
      Write-Host "Memory $((Get-Memory-Info).Description)"
    displayName: 'Bootstrap pwsh'

  - bash: |
      set -eu; set -o pipefail;
      script=https://raw.githubusercontent.com/devizer/test-and-build/master/install-build-tools-bundle.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash >/dev/null
      Say --Reset-Stopwatch
      Say "CPU: $(Get-CpuName)"
      yarn --version || true
      node --version || true
      export DOTNET_VERSIONS="5.0 6.0 7.0"
      script=https://raw.githubusercontent.com/devizer/test-and-build/master/lab/install-DOTNET.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash; 
    displayName: 'Bootstrap'

  - task: DownloadPipelineArtifact@2
    condition: succeededOrFailed()
    displayName: 'w3app: download'
    inputs:
      artifactName: w3app
      path: $(Build.SourcesDirectory)/src/universe.sqlinsights.w3app/build
      patterns: 
        "**"

  - bash: |
      set -eu; set -o pipefail
      try-and-retry curl -kfSL -o /tmp/chrome.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
      sudo dpkg -i /tmp/chrome.deb
      sudo apt-get install -f -y
      printf "/usr/bin/env bash\n port=9234; google-chrome --headless --disable-gpu --remote-debugging-port=\$port \"\$@\"\n" | sudo tee /usr/local/bin/www-browser
      sudo chmod +x /usr/local/bin/www-browser
      for c in google-chrome www-browser; do
        echo "COMMAND '$c': [$(command -v $c)]"
      done
    condition: true
    displayName: 'w3app: install chrome'

  - bash: |
      set -eu; set -o pipefail
      cd src/universe.sqlinsights.w3app
      cd build
      echo "SERVING STATIC W3APP. Content of ./static/js:"
      ls -la static/js
      Say "Installing dotnet-serve tool"
      try-and-retry dotnet tool install --global dotnet-serve || true
      dotnet serve --version 2>nul || try-and-retry dotnet tool install --global dotnet-serve
      dotnet serve --version
      nohup dotnet serve -p 6060 -o |& tee ~/w3app.log &
      sleep 2; cat ~/w3app.log
    condition: true
    displayName: 'w3app: run'


  - bash: |
      set -eu; set -o pipefail;
      sudo mkdir -p "${RAM_DISK}"
      # -o size="{RAM_DISK_SIZE:-1500}"m 
      # Say "SKIPPING TMPFS on ${RAM_DISK}"

      # VERSION2
      kb="${RAM_DISK_SIZE:-1500}"; kb=$((kb*1024));
      sudo mkdir -p /mnt/ram-disk
      sudo mount -t tmpfs -o size="${kb}"k none /mnt/ram-disk
      sudo fallocate -l "$((kb-128))k" /mnt/ram-disk/ram-file
      sudo losetup --direct-io=off /dev/loop23 /mnt/ram-disk/ram-file
      sudo mkfs.ext2 /dev/loop23
      sudo mount -o defaults,noatime,nodiratime /dev/loop23 "${RAM_DISK}"

      sudo mkdir -p "${RAM_DISK}/DB"
      sudo chown -R "$(whoami)" "${RAM_DISK}"
      sudo chmod -R 777 "${RAM_DISK}"
      Say "HOST VOLUMES"
      df -h -T
      Say "FREE MEMORY"
      Drop-FS-Cache
      free -m
    condition: ne(variables['RAM_DISK'], '')
    displayName: 'RAM Disk $(RAM_DISK) V2'

  - bash: |
      set -eu; set -o pipefail;
      v="";
      test -n "${RAM_DISK:-}" && v="-v ${RAM_DISK}:${RAM_DISK} -e MSSQL_DATA_DIR=${RAM_DISK}"
      Say "volume options: [$v]"
      echo PULL
      try-and-retry docker pull mcr.microsoft.com/mssql/server:"${SQL_IMAGE_TAG}"
      echo RUN IN BACKGROUND
      sudo mkdir -p "/ErgoFab-Tests/Integration Tests/Data"
      sudo chmod 777 -R /ErgoFab-Tests
      docker run --pull never --name sqlserver --privileged $v -v /ErgoFab-Tests:/ErgoFab-Tests -e "ACCEPT_EULA=Y" -e "MSSQL_SA_PASSWORD=p@assw0rd!" -p 1433:1433 -d mcr.microsoft.com/mssql/server:"${SQL_IMAGE_TAG}"

      set +e
      Say "SQLCMD version:"
      docker exec -t sqlserver /opt/mssql-tools/bin/sqlcmd -? | head -3
      sleep 5
      Say "Show data folder"
      docker exec -t sqlserver /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "p@assw0rd!" -Q "exec sp_databases; select * from sys.database_files; create database mydb1; exec sp_executesql N'use mydb1; select * from sys.database_files;'"
      Say "Show fn_helpcollations"
      docker exec -t sqlserver /opt/mssql-tools/bin/sqlcmd -W -w 10000 -S localhost -U sa -P "p@assw0rd!" -Q "SELECT Name, Description FROM fn_helpcollations() order by 1" |& tee $SYSTEM_ARTIFACTSDIRECTORY/fn_helpcollations.txt
      Say "DOCKER ALIVE CONTAINERS"
      docker ps
      Say "DOCKER IMAGES"
      docker image ls

      Say "/var/opt/mssql/mssql.conf"
      # /usr/src/app/do-my-sql-commands.sh & /opt/mssql/bin/sqlservr
      docker exec -t sqlserver cat /var/opt/mssql/mssql.conf
      Say "/opt/mssql/bin/sqlservr"
      docker exec -t sqlserver file /opt/mssql/bin/sqlservr || true

    condition: ne(variables['SQL_IMAGE_TAG'], '')
    displayName: 'SQL Server $(SQL_IMAGE_TAG)'

  - bash: |
      set -eu; set -o pipefail;
      docker logs sqlserver | cat | tr -d '\r' | grep -v -e "^$"
    condition: succeededOrFailed()
    displayName: 'SQL Server Logs'

  - bash: |
      set -eu; set -o pipefail;
      export ERGOFAB_TESTS_DATA_FOLDER="/ErgoFab-Tests"
      export ERGOFAB_TESTS_MASTER_CONNECTIONSTRING="TrustServerCertificate=True;Data Source=localhost,1433;User ID=sa;Password=p@assw0rd!;Encrypt=False;"
      cd src/ErgoFab.DataAccess.IntegrationTests
      dotnet test 
      cp -av TestsOutput $SYSTEM_ARTIFACTSDIRECTORY
      Say "Success Complete"
    condition: ne(variables.SKIP_ERGOFAB_TESTS,'True')
    displayName: 'Test ErgoFab (SQL)'

  - bash: |
      set -eu; set -o pipefail;
      cd src/Universe.SqlInsights.SqlServerStorage.Tests
      dotnet restore || dotnet restore --disable-parallel
    condition: succeededOrFailed()
    displayName: 'Restore'

  - bash: |
      set -eu; set -o pipefail;
      cd src/Universe.SqlInsights.SqlServerStorage.Tests
      dotnet build -c Release --no-restore
    condition: succeededOrFailed()
    displayName: 'Build'

  - bash: |
      set -eu; set -o pipefail;
      
      Say "CPU: $(Get-CpuName)"
      cd src/Universe.SqlInsights.SqlServerStorage.Tests
      export SQLINSIGHTS_CONNECTION_STRING="TrustServerCertificate=True;Data Source=localhost,1433;User ID=sa;Password=p@assw0rd!"
      export TEST_CONFIGURATION="DISK";
      export TEST_CPU_NAME="$(Get-CpuName --name-only)"
      if true && [[ -n "${RAM_DISK:-}" ]]; then
        export TEST_CONFIGURATION="RAM-Disk";
        export SQLINSIGHTS_DATA_DIR="${RAM_DISK}/DB"
        sudo mkdir -p "$SQLINSIGHTS_DATA_DIR"
        Say "SQLINSIGHTS_DATA_DIR: [$SQLINSIGHTS_DATA_DIR]"
      fi
      dotnet test -c Release --no-build -f $W3API_NET
    condition: succeededOrFailed()
    displayName: 'Test'

  - bash: |
      echo Starting W3Api
      export SQLINSIGHTS_REPORT_FOLDER="/tmp/SqlInsights-W3Api-Internal-Logs"
      export SQLINSIGHTS_REPORT_FULLNAME="${SQLINSIGHTS_REPORT_FOLDER}/Report.Txt"
      pushd src/Universe.SqlInsights.W3Api;

      export ConnectionStrings__SqlInsights="TrustServerCertificate=True;Data Source=localhost,1433;User ID=sa;Password=p@assw0rd!;Initial Catalog=SqlInsightsDb42"

      (dotnet run | tee "$SYSTEM_ARTIFACTSDIRECTORY/w3api (acceptance test).log") &
      popd
      sleep 77
      
      for proc in dotnet-serve dotnet; do pkill "$proc" || true; done
      7z a "${SYSTEM_ARTIFACTSDIRECTORY}/SqlInsights Report.7z" "${SQLINSIGHTS_REPORT_FOLDER}"
      (echo "CPU: $(Get-CpuName)"; echo "Job: ${AGENT_JOBNAME}"; cat "${SQLINSIGHTS_REPORT_FULLNAME}") > /tmp/report; cp -f /tmp/report "${SQLINSIGHTS_REPORT_FULLNAME}"
      cp -f "${SQLINSIGHTS_REPORT_FULLNAME}" "${SYSTEM_ARTIFACTSDIRECTORY}/SqlInsights Report.txt"
      true
    condition: eq(variables['TEST_W3API'], 'true')
    displayName: 'RUN W3API (optional)'
    

  - bash: |
      set -eu; set -o pipefail;
      Say "CPU: $(Get-CpuName)"
      git clone https://github.com/devizer/Universe.SqlServerJam ~/jam
      cd ~/jam/src/Universe.SqlServerJam.Tests

      export SQLSERVER_WELLKNOWN_In_Docker="TrustServerCertificate=True;Data Source=localhost,1433;User ID=sa;Password=p@assw0rd!"
      ls -la
      dotnet test -c Release -f $W3API_NET
    condition: succeededOrFailed()
    displayName: 'Test JAM'


  - bash: |
      set -eu; set -o pipefail;
      test -d "${RAM_DISK:-}" && ls -laR "${RAM_DISK:-}"
      Say "Disk Usage"
      df -h -T
    condition: ne(variables['RAM_DISK'], '')
    displayName: 'Show RAM Disk'

  - bash: |
      set -eu; set -o pipefail;
      docker logs sqlserver | cat | tr -d '\r' | grep -v -e "^$"
    condition: succeededOrFailed()
    displayName: 'SQL Server Logs'

  - bash: |
      set -eu; set -o pipefail;
      docker exec -t sqlserver cat /var/opt/mssql/log/errorlog | tr -d '\r'
    condition: succeededOrFailed()
    displayName: 'SQL /var/.../errorlog'

    

  - publish: $(SYSTEM.ARTIFACTSDIRECTORY)
    displayName: 'Publish Artifacts'
    # condition: succeededOrFailed()
    artifact: '$(Agent.JobName)'


  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testRunner: VSTest
      testResultsFiles: '**/*.trx'
      testRunTitle: 'All the tests for $(Agent.JobName)'
      
  - task: PublishCodeCoverageResults@1
    condition: succeededOrFailed()
    inputs:
      codeCoverageTool: cobertura
      failIfCoverageEmpty: false # Optional      
      summaryFileLocation: '**/In/**/coverage.cobertura.xml'

