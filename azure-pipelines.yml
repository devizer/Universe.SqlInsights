variables:
  Project: 'Universe.SqlInsights'
  TEST_W3API: true
  # Default image
  VMIMAGE: 'windows-2019'
  DEFAULT_RAM_DISK_SIZE: "2600"
  W3API_NET: net6.0

jobs:

  - job: Build_W3_App
    displayName: 'Build W3App Shared Artifact'
    pool:
      vmImage: "ubuntu-20.04"
    steps:

      - bash: |
         script=https://raw.githubusercontent.com/devizer/test-and-build/master/install-build-tools-bundle.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash >/dev/null
         for v in 5.0 6.0 7.0 8.0; do
           Say "ASP.NET $v"
           try-and-retry try-and-retry docker manifest inspect mcr.microsoft.com/dotnet/aspnet:$v
         done 
         true
        displayName: "Docker ispect images"

      - bash: |
         script=https://raw.githubusercontent.com/devizer/test-and-build/master/install-build-tools-bundle.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash >/dev/null
         export NODE_VER=v14.19.1 SKIP_NPM_UPGRADE=True
         time (script=https://raw.githubusercontent.com/devizer/glist/master/install-dotnet-and-nodejs.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash -s node)
         cd src/universe.sqlinsights.w3app
         node --version
         time yarn install 
         time yarn build
        retryCountOnTaskFailure: 3
        displayName: 'Build w3app'

      - publish: $(Build.SourcesDirectory)/src/universe.sqlinsights.w3app/build
        retryCountOnTaskFailure: 3
        displayName: 'Publish Artifact'
        condition: succeededOrFailed()
        artifact: 'w3app'
    
  
  - job: IfWindows
    displayName: If
    # condition: eq('Never','')
    dependsOn:
      - Build_W3_App
    strategy:
      maxParallel: 9
      matrix:

        "SQL Server 2016":
          SQL: 'SqlServer 2016 Express: MSSQLSERVER'
          TEST_ADVENTURE_WORKS: true

        "SQL Server 2008 Advanced":
          SQL: 'SqlServer 2008 Express Advanced: MSSQLSERVER'
        # "SQL Server 2008 Advanced on Windows Server 2022":
        #   SQL: 'SqlServer 2008 Express Advanced: MSSQLSERVER'
        #   VMIMAGE: 'windows-2022'
 
        "SQL Server 2008 R2":
          SQL: 'SqlServer 2008R2 Express: MSSQLSERVER'
          MSI_DUMP: true
        "SQL Server 2008":
          SQL: 'SqlServer 2008 Express: MSSQLSERVER'
        "SQL Server 2005":
          SQL: 'SqlServer 2005 Express: MSSQLSERVER'
          RAM_DISK: "R"
          RAM_DISK_SIZE: "$(DEFAULT_RAM_DISK_SIZE)"
        
        # VMIMAGE: 'windows-2016' does not exist
        
        # "SQL Server 2008 R2 on Windows Server 2022":
        #   SQL: 'SqlServer 2008R2 Express: MSSQLSERVER'
        #   MSI_DUMP: true
        #   VMIMAGE: 'windows-2022'
        #   UNINSTALL_TRASH: True
        # "SQL Server 2008 on Windows Server 2022":
        #   SQL: 'SqlServer 2008 Express: MSSQLSERVER'
        #   VMIMAGE: 'windows-2022'
        #   UNINSTALL_TRASH: True
        # "SQL Server 2005 on Windows Server 2022":
        #   SQL: 'SqlServer 2005 Express: MSSQLSERVER'
        #   VMIMAGE: 'windows-2022'
        #   UNINSTALL_TRASH: True
        
        'SQL Server 2022 Dev on Windows Server 2022':
          SQL: 'SqlServer 2022 Developer: MSSQLSERVER'
          TEST_ADVENTURE_WORKS: true
          VMIMAGE: 'windows-2022'
          RAM_DISK: "R"
          RAM_DISK_SIZE: "$(DEFAULT_RAM_DISK_SIZE)"
        "SQL Server 2019 Dev":
          SQL: 'SqlServer 2019 Developer: MSSQLSERVER'
          TEST_ADVENTURE_WORKS: true
        
        "SQL Server 2012":
          SQL: 'SqlServer 2012 Express: MSSQLSERVER'
        "SQL Server 2014":
          SQL: 'SqlServer 2014 Express: MSSQLSERVER'
          TEST_ADVENTURE_WORKS: true
        "SQL Server 2017 Dev":
          SQL: 'SqlServer 2017 Developer: MSSQLSERVER'
          TEST_ADVENTURE_WORKS: true
        "SQL Server 2017":
          SQL: 'SqlServer 2017 Express: MSSQLSERVER'
          TEST_ADVENTURE_WORKS: true

    variables:
      OS: Windows
      # SQL: 'SqlServer 2019 Developer: MSSQLSERVER'
    timeoutInMinutes: 49
    cancelTimeoutInMinutes: 1
    pool:
      vmImage: "$(VMIMAGE)"
    steps:
      - template: azure-steps-win.yml


  - job: IfLinux
    displayName: 'If'
    dependsOn:
      - Build_W3_App
    strategy:
      maxParallel: 2
      matrix:

        "SQL Server 2022 on Ubuntu with RAM Disk":
          VMIMAGE: 'ubuntu-20.04'
          RAM_DISK: "/ram-disk"
          RAM_DISK_SIZE: "$(DEFAULT_RAM_DISK_SIZE)"
          SQL_IMAGE_TAG: "2022-latest"
        
        "SQL Server 2022 on Ubuntu":
          VMIMAGE: 'ubuntu-20.04'
          SQL_IMAGE_TAG: "2022-latest"
        
        "SQL Server 2019 on Ubuntu with RAM Disk":
          VMIMAGE: 'ubuntu-20.04'
          RAM_DISK: "/ram-disk"
          RAM_DISK_SIZE: "$(DEFAULT_RAM_DISK_SIZE)"
          SQL_IMAGE_TAG: "2019-latest"
        
        "SQL Server 2019 on Ubuntu":
          VMIMAGE: 'ubuntu-20.04'
          SQL_IMAGE_TAG: "2019-latest"
        
        "SQL Server 2017 on Ubuntu with RAM Disk":
          VMIMAGE: 'ubuntu-20.04'
          RAM_DISK: "/ram-disk"
          RAM_DISK_SIZE: "$(DEFAULT_RAM_DISK_SIZE)"
          SQL_IMAGE_TAG: "2017-latest"

        "SQL Server 2017 on Ubuntu":
          VMIMAGE: 'ubuntu-20.04'
          SQL_IMAGE_TAG: "2017-latest"
        
    timeoutInMinutes: 20
    cancelTimeoutInMinutes: 1
    pool:
      vmImage: "$(VMIMAGE)"
    steps:
      - template: azure-steps-linux.yml
  
  - job: 'Combine'
    condition: succeededOrFailed()
    pool:
      vmImage: 'ubuntu-20.04'
    timeoutInMinutes: 30
    dependsOn:
      - IfLinux
      - IfWindows

    steps: 
    - script: |
        script=https://raw.githubusercontent.com/devizer/test-and-build/master/install-build-tools-bundle.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash >/dev/null
        Say --Reset-Stopwatch; Say "CPU: $(Get-CpuName)"

        RAW_ARTIFACTS_DIR="$(Agent.TempDirectory)/artifacts"
        echo "##vso[task.setvariable variable=RAW_ARTIFACTS_DIR]$RAW_ARTIFACTS_DIR"
        Say "RAW_ARTIFACTS_DIR: $RAW_ARTIFACTS_DIR"
      displayName: 'Config Deploy'


    - task: DownloadPipelineArtifact@2
      condition: succeededOrFailed()
      displayName: 'Download of all platforms to $(RAW_ARTIFACTS_DIR)'
      inputs:
        path: $(RAW_ARTIFACTS_DIR)
        patterns: 
          "**"
      
    - script: |
        set -eu; set -o pipefail
        Say "RAW_ARTIFACTS_DIR: [${RAW_ARTIFACTS_DIR}]"

        benchmark="$SYSTEM_ARTIFACTSDIRECTORY/Benchmark.txt"
        mkdir -p $SYSTEM_ARTIFACTSDIRECTORY/Bench
        find "${RAW_ARTIFACTS_DIR}" -name AddAction.log | sort | while IFS='' read -r file; do
          pushd "$(dirname "$file")" >/dev/null
          title="$(basename "$(pwd)")"
          popd >/dev/null
          echo $title >> "$benchmark"
          cat "$file" >> "$benchmark"
          echo "" >> "$benchmark"
        done

        SqlInsightsReport="$SYSTEM_ARTIFACTSDIRECTORY/SqlInsightsReport.txt"
        find "${RAW_ARTIFACTS_DIR}" -name "SqlInsights Report.txt" | sort | while IFS='' read -r file; do
          (awk -v RS= 'NR==1' "$file"; echo "") | tee -a "$SqlInsightsReport"
        done

        7z a -mx=3 "$SYSTEM_ARTIFACTSDIRECTORY/Combined as is.7z" "${RAW_ARTIFACTS_DIR}"

        # Clean
        rm -rf ${RAW_ARTIFACTS_DIR}/* || true

      condition: succeededOrFailed()
      displayName: 'Combine benchmarks'

    - task: PublishBuildArtifacts@1
      condition: succeededOrFailed()
      displayName: 'Publish'
      inputs:
        pathtoPublish: '$(SYSTEM.ARTIFACTSDIRECTORY)'
        artifactName: 'Combined benchmark (and artifacts)'


trigger:
  batch: false
  branches:
    include:
    - main
  paths:
    include:
    - '**'
    exclude:
    - 'azure-pipelines-W3App-Docker-Image.yml'
    - 'scripts/**'

