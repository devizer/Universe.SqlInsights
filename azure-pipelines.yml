variables:
  Project: 'Universe.SqlInsights'
  TEST_W3API: true
  # Default image
  VMIMAGE: 'windows-2019'
  DEFAULT_RAM_DISK_SIZE: "1500"

jobs:

  - job: Test
    strategy:
      maxParallel: 8
      matrix:

        "SQL Server 2022 on Ubuntu with RAM Disk":
          VMIMAGE: 'ubuntu-20.04'
          RAM_DISK: "/ram-disk"
          RAM_DISK_SIZE: "$(DEFAULT_RAM_DISK_SIZE)"
          SQL_IMAGE_TAG: "2022-latest"
        
        "SQL Server 2022 on Ubuntu":
          VMIMAGE: 'ubuntu-20.04'
          SQL_IMAGE_TAG: "2022-latest"
        
        "SQL Server 2019 on Ubuntu with RAM Disk":
          VMIMAGE: 'ubuntu-20.04'
          RAM_DISK: "/ram-disk"
          RAM_DISK_SIZE: "$(DEFAULT_RAM_DISK_SIZE)"
          SQL_IMAGE_TAG: "2019-latest"
        
        "SQL Server 2019 on Ubuntu":
          VMIMAGE: 'ubuntu-20.04'
          SQL_IMAGE_TAG: "2019-latest"
        
        "SQL Server 2017 on Ubuntu with RAM Disk":
          VMIMAGE: 'ubuntu-20.04'
          RAM_DISK: "/ram-disk"
          RAM_DISK_SIZE: "$(DEFAULT_RAM_DISK_SIZE)"
          SQL_IMAGE_TAG: "2017-latest"

        "SQL Server 2017 on Ubuntu":
          VMIMAGE: 'ubuntu-20.04'
          SQL_IMAGE_TAG: "2017-latest"
        
    timeoutInMinutes: 40
    cancelTimeoutInMinutes: 1
    pool:
      vmImage: "$(VMIMAGE)"
    steps:
      - template: azure-steps-linux.yml
  
  - job: If
    condition: eq('Never','')
    strategy:
      maxParallel: 7
      matrix:

        "SQL Server 2008 R2":
          SQL: 'SqlServer 2008R2 Express: MSSQLSERVER'
          MSI_DUMP: true
        "SQL Server 2008":
          SQL: 'SqlServer 2008 Express: MSSQLSERVER'
        "SQL Server 2005":
          SQL: 'SqlServer 2005 Express: MSSQLSERVER'
          RAM_DISK: "R"
          RAM_DISK_SIZE: "$(DEFAULT_RAM_DISK_SIZE)"
        
        # VMIMAGE: 'windows-2016' does not exist
        
        # "SQL Server 2008 R2 on Windows Server 2022":
        #   SQL: 'SqlServer 2008R2 Express: MSSQLSERVER'
        #   MSI_DUMP: true
        #   VMIMAGE: 'windows-2022'
        #   UNINSTALL_TRASH: True
        # "SQL Server 2008 on Windows Server 2022":
        #   SQL: 'SqlServer 2008 Express: MSSQLSERVER'
        #   VMIMAGE: 'windows-2022'
        #   UNINSTALL_TRASH: True
        # "SQL Server 2005 on Windows Server 2022":
        #   SQL: 'SqlServer 2005 Express: MSSQLSERVER'
        #   VMIMAGE: 'windows-2022'
        #   UNINSTALL_TRASH: True
        
        'SQL Server 2022 Dev on Windows Server 2022':
          SQL: 'SqlServer 2022 Developer: MSSQLSERVER'
          TEST_ADVENTURE_WORKS: true
          VMIMAGE: 'windows-2022'
          RAM_DISK: "R"
          RAM_DISK_SIZE: "$(DEFAULT_RAM_DISK_SIZE)"
        "SQL Server 2019 Dev":
          SQL: 'SqlServer 2019 Developer: MSSQLSERVER'
          TEST_ADVENTURE_WORKS: true
        
        "SQL Server 2012":
          SQL: 'SqlServer 2012 Express: MSSQLSERVER'
        "SQL Server 2014":
          SQL: 'SqlServer 2014 Express: MSSQLSERVER'
          TEST_ADVENTURE_WORKS: true
        "SQL Server 2016":
          SQL: 'SqlServer 2016 Express: MSSQLSERVER'
          TEST_ADVENTURE_WORKS: true
        "SQL Server 2017 Dev":
          SQL: 'SqlServer 2017 Developer: MSSQLSERVER'
          TEST_ADVENTURE_WORKS: true
        "SQL Server 2017":
          SQL: 'SqlServer 2017 Express: MSSQLSERVER'
          TEST_ADVENTURE_WORKS: true

    variables:
      OS: Windows
      # SQL: 'SqlServer 2019 Developer: MSSQLSERVER'
    timeoutInMinutes: 40
    cancelTimeoutInMinutes: 1
    pool:
      vmImage: "$(VMIMAGE)"
    steps:
      - template: azure-steps-win.yml

- job: 'Combine'
  condition: succeededOrFailed()
  pool:
    vmImage: 'ubuntu-20.04'
  timeoutInMinutes: 30
  dependsOn:
    - Test
    - If

  steps: 
  - script: |
      script=https://raw.githubusercontent.com/devizer/test-and-build/master/install-build-tools-bundle.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash >/dev/null
      Say --Reset-Stopwatch; Say "CPU: $(Get-CpuName)"

      RAW_ARTIFACTS_DIR="$(Agent.TempDirectory)/artifacts"
      echo "##vso[task.setvariable variable=RAW_ARTIFACTS_DIR]$RAW_ARTIFACTS_DIR"
      Say "RAW_ARTIFACTS_DIR: $RAW_ARTIFACTS_DIR"
    displayName: 'Config Deploy'

  - task: DownloadPipelineArtifact@2
    condition: succeededOrFailed()
    displayName: 'Download of all platforms to $(RAW_ARTIFACTS_DIR)'
    inputs:
      path: $(RAW_ARTIFACTS_DIR)
      patterns: 
        "**"
    
  - script: |
      set -eu; set -o pipefail
      Say "RAW_ARTIFACTS_DIR: [${RAW_ARTIFACTS_DIR}]"

      benchmark="$SYSTEM_ARTIFACTSDIRECTORY/Benchmark.txt"
      mkdir -p $SYSTEM_ARTIFACTSDIRECTORY/Bench
      find "${RAW_ARTIFACTS_DIR}" -name AddAction.log | while IFS='' read -r file; do
        pushd "$(dirname "$file")" >/dev/null
        title="$(basename "$(pwd)")"
        popd >/dev/null
        echo $title >> "$benchmark"
        cat $file >> "$benchmark"
        echo "" >> "$benchmark"
      done

      7z a -mx=3 "$SYSTEM_ARTIFACTSDIRECTORY/Combined as is.7z" "${RAW_ARTIFACTS_DIR}"

      # Clean
      rm -rf ${RAW_ARTIFACTS_DIR}/* || true

    condition: succeededOrFailed()
    displayName: 'Deploy GitHub Release $(CMAKE_VER)'

  - task: PublishBuildArtifacts@1
    condition: succeededOrFailed()
    displayName: 'Publish'
    inputs:
      pathtoPublish: '$(SYSTEM.ARTIFACTSDIRECTORY)'
      artifactName: 'Nuget Cache (combined)'


trigger:
  batch: false
  branches:
    include:
      - main

