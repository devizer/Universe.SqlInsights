variables:
  Project: 'Universe.SqlInsights'
  TEST_W3API: true
  # Default image
  VMIMAGE: 'windows-2019'
  DEFAULT_RAM_DISK_SIZE: "2400"
  W3API_NET: net6.0
  SKIP_ERGOFAB_TESTS: 'False'

jobs:

  - job: Build_W3_App
    displayName: 'Build W3App Shared Artifact, JAM Tests and Tests'
    pool:
      vmImage: "ubuntu-24.04"
    steps:

      - bash: |
          script=https://raw.githubusercontent.com/devizer/test-and-build/master/install-build-tools-bundle.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash >/dev/null
          Say "CPU: $(Get-CpuName)"
          for v in 8.0 6.0; do
            Say "ASP.NET $v"
            try-and-retry try-and-retry docker manifest inspect mcr.microsoft.com/dotnet/aspnet:$v
          done 
          true
        retryCountOnTaskFailure: 3
        displayName: "INSPECT ASP.NET docker images"

      - bash: |
         Say "CPU: $(Get-CpuName)"
         script=https://raw.githubusercontent.com/devizer/test-and-build/master/install-build-tools-bundle.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash >/dev/null
         export NODE_VER=v16.20.2 SKIP_NPM_UPGRADE=True
         time (script=https://raw.githubusercontent.com/devizer/glist/master/install-dotnet-and-nodejs.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash -s node)
         cd src/universe.sqlinsights.w3app
         node --version
         time yarn install
         time yarn build
        retryCountOnTaskFailure: 3
        displayName: 'BUILD w3app'

      - publish: $(Build.SourcesDirectory)/src/universe.sqlinsights.w3app/build
        retryCountOnTaskFailure: 3
        displayName: 'PUBLISH w3app'
        # condition: succeededOrFailed()
        artifact: 'w3app'
    
      - bash: |
          configuration=Release
          
          Say "Build fx-dependent [ErgoFab.DataAccess.IntegrationTests]"
          pushd src/ErgoFab.DataAccess.IntegrationTests
          time try-and-retry dotnet publish -c $configuration -o $SYSTEM_ARTIFACTSDIRECTORY/ergofab.tests -f net8.0
          popd

          Say "Build fx-dependent W3API"
          pushd src/Universe.SqlInsights.W3Api
          time try-and-retry dotnet publish -c $configuration -o $SYSTEM_ARTIFACTSDIRECTORY/w3api -f net6.0
          popd

          Say "Build fx-dependent [SqlServerStorage].Tests"
          pushd src/Universe.SqlInsights.SqlServerStorage.Tests
          time try-and-retry dotnet publish -c $configuration -o $SYSTEM_ARTIFACTSDIRECTORY/w3api.tests -f net6.0
          popd

          Say "Build fx-dependent [https://github.com/devizer/Universe.SqlServerJam].Tests"
          git clone https://github.com/devizer/Universe.SqlServerJam ~/jam
          pushd ~/jam/src/Universe.SqlServerJam.Tests
          time try-and-retry dotnet publish -c $configuration -o $SYSTEM_ARTIFACTSDIRECTORY/jam.tests -f net6.0
          popd

          Say "Build fx-dependent [https://github.com/devizer/Universe.SqlServerQueryCache].Tests"
          git clone https://github.com/devizer/Universe.SqlServerQueryCache ~/QueryCache
          pushd ~/QueryCache/Universe.SqlServerQueryCache.Tests
          time try-and-retry dotnet publish -c $configuration -o $SYSTEM_ARTIFACTSDIRECTORY/QueryCache.tests -f net8.0
          popd

        retryCountOnTaskFailure: 1
        displayName: 'BUILD w3api, w3api.tests, and jam.tests'
  
      - publish: '$(SYSTEM.ARTIFACTSDIRECTORY)'
        retryCountOnTaskFailure: 3
        displayName: 'PUBLISH w3api, w3api.tests, and jam.tests'
        artifact: 'Goods'

  - job: IfLinux
    displayName: 'If'
    dependsOn:
      - Build_W3_App
    strategy:
      maxParallel: 6
      matrix:

        # "SQL Server 2017 on Ubuntu 24.04a":
        #   VMIMAGE: 'ubuntu-24.04'
        #   SQL_IMAGE_TAG: "2017-latest"
        
        # "SQL Server 2017 on Ubuntu 24.04b":
        #   VMIMAGE: 'ubuntu-24.04'
        #   SQL_IMAGE_TAG: "2017-latest"

        # "SQL Server 2017-CU9-ubuntu on Ubuntu 24.04":
        #   VMIMAGE: 'ubuntu-24.04'
        #   SQL_IMAGE_TAG: "2017-CU9-ubuntu"

        # "SQL Server 2019-CU16-ubuntu-16.04 on Ubuntu 24.04":
        #   VMIMAGE: 'ubuntu-24.04'
        #   SQL_IMAGE_TAG: "2019-CU16-ubuntu-16.04"
        
        #"SQL Server 2017 on Ubuntu 24.04c":
        #  VMIMAGE: 'ubuntu-24.04'
        #  SQL_IMAGE_TAG: "2017-latest"
        
        #"SQL Server 2017 on Ubuntu 24.04d":
        #  VMIMAGE: 'ubuntu-24.04'
        #  SQL_IMAGE_TAG: "2017-latest"
        
        #"SQL Server 2017 on Ubuntu 24.04e":
        #  VMIMAGE: 'ubuntu-24.04'
        #  SQL_IMAGE_TAG: "2017-latest"
        
        #"SQL Server 2017 on Ubuntu 24.04f":
        #  VMIMAGE: 'ubuntu-24.04'
        #  SQL_IMAGE_TAG: "2017-latest"
        
        #"SQL Server 2017 on Ubuntu 22.04":
        #  VMIMAGE: 'ubuntu-22.04'
        #  SQL_IMAGE_TAG: "2017-latest"
        
        # "SQL Server 2017 on Ubuntu 20.04":
        #   VMIMAGE: 'ubuntu-20.04'
        #  SQL_IMAGE_TAG: "2017-latest"
        
        "SQL Server 2022 on Ubuntu":
          VMIMAGE: 'ubuntu-22.04'
          SQL_IMAGE_TAG: "2022-latest"
        
        "SQL Server 2019 on Ubuntu":
          VMIMAGE: 'ubuntu-22.04'
          SQL_IMAGE_TAG: "2019-latest"

        

        "SQL Server 2022 on Ubuntu with RAM Disk":
          VMIMAGE: 'ubuntu-24.04'
          RAM_DISK: "/ram-disk"
          RAM_DISK_SIZE: "$(DEFAULT_RAM_DISK_SIZE)"
          SQL_IMAGE_TAG: "2022-latest"
        
        "SQL Server 2019 on Ubuntu with RAM Disk":
          VMIMAGE: 'ubuntu-24.04'
          RAM_DISK: "/ram-disk"
          RAM_DISK_SIZE: "$(DEFAULT_RAM_DISK_SIZE)"
          SQL_IMAGE_TAG: "2019-latest"
        
        # "SQL Server 2017 on Ubuntu with RAM Disk":
        #   VMIMAGE: 'ubuntu-22.04'
        #  RAM_DISK: "/ram-disk"
        #  RAM_DISK_SIZE: "$(DEFAULT_RAM_DISK_SIZE)"
        #  SQL_IMAGE_TAG: "2017-latest"

    timeoutInMinutes: 20
    cancelTimeoutInMinutes: 1
    pool:
      vmImage: "$(VMIMAGE)"
    steps:
      - template: azure-steps-linux.yml
  

  - job: IfWindows
    displayName: If
    # condition: eq('Never','')
    dependsOn:
      - Build_W3_App
    variables:
      SQLTRACE_FOLDER: 'D:\Sql-Traces'
      OS: Windows
      # SQL: 'SqlServer 2019 Developer: MSSQLSERVER'
    strategy:
      maxParallel: 10
      matrix:

        "SQL Server 2017 Developer Updated":
          SQL: '2017 Developer Updated: MSSQLSERVER'
          TEST_ADVENTURE_WORKS: true

        "SQL Server 2017 Developer RTM":
          SQL: '2017 Developer: MSSQLSERVER'
          TEST_ADVENTURE_WORKS: true

        "SQL Server 2019 Developer":
          SQL: '2019 Developer: MSSQLSERVER'
          TEST_ADVENTURE_WORKS: true

        'SQL Server 2022 Developer on Windows Server 2022':
          SQL: '2022 Developer: MSSQLSERVER'
          TEST_ADVENTURE_WORKS: true
          VMIMAGE: 'windows-2022'

        'SQL Server 2022 Developer RAM DISK on Windows Server 2022':
          SQL: '2022 Developer: MSSQLSERVER'
          TEST_ADVENTURE_WORKS: true
          VMIMAGE: 'windows-2022'
          RAM_DISK: "R"
          RAM_DISK_SIZE: "$(DEFAULT_RAM_DISK_SIZE)"
        
        "SQL Server 2008-R2 Core":
          SQL: '2008R2 Core: MSSQLSERVER'
          MSI_DUMP: true
        
        "SQL Server 2008-R2 Developer":
          SQL: '2008R2 Developer Updated: MSSQLSERVER'
          MSI_DUMP: true
        
        "SQL Server 2008 Core":
          SQL: '2008 Core: MSSQLSERVER'

        "SQL Server 2008 Developer":
          SQL: '2008 Developer Updated: MSSQLSERVER'

        "SQL Server 2016 Core":
          SQL: '2016 Core: MSSQLSERVER'
          TEST_ADVENTURE_WORKS: true

        "SQL Server 2016 Developer":
          SQL: '2016 Developer: MSSQLSERVER'
          TEST_ADVENTURE_WORKS: true

        "SQL Server 2008 Advanced":
          SQL: '2008 Advanced: MSSQLSERVER'
        # "SQL Server 2008 Advanced on Windows Server 2022":
        #   SQL: 'SqlServer 2008 Express Advanced: MSSQLSERVER'
        #   VMIMAGE: 'windows-2022'
 
        "SQL Server 2005 Core RAM DISK":
          SQL: '2005 Core: MSSQLSERVER'
          RAM_DISK: "R"
          RAM_DISK_SIZE: "$(DEFAULT_RAM_DISK_SIZE)"
          SKIP_ERGOFAB_TESTS: "True"
        
        "SQL Server 2005 Core":
          SQL: '2005 Core: MSSQLSERVER'
          SKIP_ERGOFAB_TESTS: "True"
        
        # VMIMAGE: 'windows-2016' does not exist
        
        # "SQL Server 2008 R2 on Windows Server 2022":
        #   SQL: 'SqlServer 2008R2 Express: MSSQLSERVER'
        #   MSI_DUMP: true
        #   VMIMAGE: 'windows-2022'
        #   UNINSTALL_TRASH: True
        # "SQL Server 2008 on Windows Server 2022":
        #   SQL: 'SqlServer 2008 Express: MSSQLSERVER'
        #   VMIMAGE: 'windows-2022'
        #   UNINSTALL_TRASH: True
        # "SQL Server 2005 on Windows Server 2022":
        #   SQL: 'SqlServer 2005 Express: MSSQLSERVER'
        #   VMIMAGE: 'windows-2022'
        #   UNINSTALL_TRASH: True
        
        "SQL Server 2012 Developer":
          SQL: '2012 Developer: MSSQLSERVER'
        "SQL Server 2014 Developer":
          SQL: '2014 Developer: MSSQLSERVER'
          TEST_ADVENTURE_WORKS: true
        "SQL Server 2014 Core":
          SQL: '2014 Core Updated: MSSQLSERVER'
          TEST_ADVENTURE_WORKS: true
        
        "SQL Server 2022 Core":
          SQL: '2022 Core: MSSQLSERVER'
          TEST_ADVENTURE_WORKS: true
        "SQL Server 2019 Core":
          SQL: '2019 Core: MSSQLSERVER'
          TEST_ADVENTURE_WORKS: true
        "SQL Server 2017 Core RTM":
          SQL: '2017 Core: MSSQLSERVER'
          TEST_ADVENTURE_WORKS: true

        "SQL Server 2017 Core Updated":
          SQL: '2017 Core Updated: MSSQLSERVER'
          TEST_ADVENTURE_WORKS: true

    timeoutInMinutes: 49
    cancelTimeoutInMinutes: 1
    pool:
      vmImage: "$(VMIMAGE)"
    steps:
      - template: azure-steps-win.yml


  - job: 'Combine'
    condition: succeededOrFailed()
    pool:
      vmImage: 'ubuntu-24.04'
    timeoutInMinutes: 30
    dependsOn:
      - IfLinux
      - IfWindows

    steps: 
    - script: |
        script=https://raw.githubusercontent.com/devizer/test-and-build/master/install-build-tools-bundle.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash >/dev/null
        Say --Reset-Stopwatch; Say "CPU: $(Get-CpuName)"

        RAW_ARTIFACTS_DIR="$(Agent.TempDirectory)/artifacts"
        echo "##vso[task.setvariable variable=RAW_ARTIFACTS_DIR]$RAW_ARTIFACTS_DIR"
        Say "RAW_ARTIFACTS_DIR: $RAW_ARTIFACTS_DIR"
      displayName: 'Config Deploy'


    - task: DownloadPipelineArtifact@2
      condition: succeededOrFailed()
      displayName: 'Download of all platforms to $(RAW_ARTIFACTS_DIR)'
      inputs:
        path: $(RAW_ARTIFACTS_DIR)
        patterns: 
          "**"
      
    - script: |
        set -eu; set -o pipefail
        Say "RAW_ARTIFACTS_DIR: [${RAW_ARTIFACTS_DIR}]"

        benchmark="$SYSTEM_ARTIFACTSDIRECTORY/Benchmark.txt"
        mkdir -p $SYSTEM_ARTIFACTSDIRECTORY/Bench
        find "${RAW_ARTIFACTS_DIR}" -name AddAction.log | sort | while IFS='' read -r file; do
          pushd "$(dirname "$file")" >/dev/null
          title="$(basename "$(pwd)")"
          popd >/dev/null
          echo $title >> "$benchmark"
          cat "$file" >> "$benchmark"
          echo "" >> "$benchmark"
        done

        SqlInsightsReport="$SYSTEM_ARTIFACTSDIRECTORY/SqlInsightsReport.txt"
        find "${RAW_ARTIFACTS_DIR}" -name "SqlInsights Report.txt" | sort | while IFS='' read -r file; do
          (awk -v RS= 'NR==1' "$file"; echo "") | tee -a "$SqlInsightsReport"
        done

        7z a -mx=4 -ms=on -mqs=on "$SYSTEM_ARTIFACTSDIRECTORY/SqlInsights Combined As Is.7z" "${RAW_ARTIFACTS_DIR}"

        # Clean
        rm -rf ${RAW_ARTIFACTS_DIR}/* || true

      condition: succeededOrFailed()
      displayName: 'Combine benchmarks'

    - task: PublishBuildArtifacts@1
      condition: succeededOrFailed()
      displayName: 'Publish'
      inputs:
        pathtoPublish: '$(SYSTEM.ARTIFACTSDIRECTORY)'
        artifactName: 'Combined benchmark (and artifacts)'


trigger:
  batch: false
  branches:
    include:
    - main
  paths:
    include:
    - '**'
    exclude:
    - 'azure-pipelines-W3App-Docker-Image.yml'
    - 'scripts/**'

