[{"U:\\_GIT\\Universe.SqlInsights\\src\\universe.sqlinsights.w3app\\src\\stores\\DataSourceListener.js":"1","U:\\_GIT\\Universe.SqlInsights\\src\\universe.sqlinsights.w3app\\src\\stores\\DataSourceDispatcher.js":"2","U:\\_GIT\\Universe.SqlInsights\\src\\universe.sqlinsights.w3app\\src\\stores\\DataSourceStore.js":"3","U:\\_GIT\\Universe.SqlInsights\\src\\universe.sqlinsights.w3app\\src\\index.js":"4","U:\\_GIT\\Universe.SqlInsights\\src\\universe.sqlinsights.w3app\\src\\stores\\DataSourceActions.js":"5","U:\\_GIT\\Universe.SqlInsights\\src\\universe.sqlinsights.w3app\\src\\Shared\\ActionKeyPathUi.js":"6","U:\\_GIT\\Universe.SqlInsights\\src\\universe.sqlinsights.w3app\\src\\Helper.js":"7","U:\\_GIT\\Universe.SqlInsights\\src\\universe.sqlinsights.w3app\\src\\Actions\\ActionList.js":"8","U:\\_GIT\\Universe.SqlInsights\\src\\universe.sqlinsights.w3app\\src\\stores\\DocumentVisibilityStore.js":"9"},{"size":2007,"mtime":1611861873243,"results":"10","hashOfConfig":"11"},{"size":73,"mtime":1609668142844,"results":"12","hashOfConfig":"11"},{"size":1310,"mtime":1609673396507,"results":"13","hashOfConfig":"11"},{"size":500,"mtime":1609615045656,"results":"14","hashOfConfig":"11"},{"size":547,"mtime":1609673780561,"results":"15","hashOfConfig":"11"},{"size":182,"mtime":1609778154645,"results":"16","hashOfConfig":"11"},{"size":565,"mtime":1611169417392,"results":"17","hashOfConfig":"11"},{"size":14754,"mtime":1611861101459,"results":"18","hashOfConfig":"11"},{"size":896,"mtime":1611172885961,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"22","usedDeprecatedRules":"23"},"dwfas7",{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"35","usedDeprecatedRules":"32"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"45"},"U:\\_GIT\\Universe.SqlInsights\\src\\universe.sqlinsights.w3app\\src\\stores\\DataSourceListener.js",["46","47","48"],"﻿import * as Helper from \"../Helper\"\r\nimport * as DataSourceActions from './DataSourceActions'\r\nimport DataSourceStore from \"./DataSourceStore\";\r\n\r\n// export const API_URL=\"http://localhost:8776/SqlInsights\";\r\nexport const API_URL=\"http://localhost:50420/api/v1/SqlInsights\";\r\n// export const API_URL=\"http://localhost:56111/AppInsight\"\r\n\r\nclass DataSourceListener {\r\n\r\n    constructor() {\r\n        this.watchdogTick = this.watchdogTick.bind(this);\r\n        this.timerId = setInterval(this.watchdogTick, 1000);\r\n        \r\n        setTimeout(this.watchdogTick);\r\n\r\n/*\r\n        if (window && window.requestIdleCallback)\r\n            window.requestIdleCallback(this.watchdogTick);\r\n*/\r\n    }\r\n\r\n    watchdogTick() {\r\n        let apiUrl = `${API_URL}/Summary`;\r\n        try {\r\n            fetch(apiUrl, {method:'POST'})\r\n                .then(response => {\r\n                    // console.log(`Response.Status for ${apiUrl} obtained: ${response.status}`);\r\n                    // console.log(response);\r\n                    // console.log(response.body);\r\n                    return response.ok ? response.json() : {error: response.status, details: response.json()}\r\n                })\r\n                .then(dataSource => {\r\n                    DataSourceListener.TransformOnLoad(dataSource);\r\n                    DataSourceActions.DataSourceUpdated(dataSource);\r\n                    // console.log(\"DATA SOURCE RETRIEVED\", dataSource);\r\n                })\r\n                .catch(error => {\r\n                    console.error(error);\r\n                    // DataSourceActions.ConnectionStatusUpdated(false);\r\n                });\r\n        } catch (err) {\r\n            console.error(`FETCH failed for ${apiUrl}. ${err}`);\r\n        }\r\n    }\r\n    \r\n    static TransformOnLoad(dataSource) {\r\n        dataSource.forEach(action => {\r\n            action.KeyString = action.Key.Path.join(\" \\u2192 \");\r\n        })\r\n    }\r\n}\r\n\r\nconst dataSourceListener = new DataSourceListener();\r\nexport default dataSourceListener;\r\n",["49","50"],"U:\\_GIT\\Universe.SqlInsights\\src\\universe.sqlinsights.w3app\\src\\stores\\DataSourceDispatcher.js",["51"],"﻿import {Dispatcher} from \"flux\";\r\n\r\nexport default new Dispatcher();\r\n","U:\\_GIT\\Universe.SqlInsights\\src\\universe.sqlinsights.w3app\\src\\stores\\DataSourceStore.js",["52"],"﻿import dispatcher from \"./DataSourceDispatcher\";\r\nimport {EventEmitter} from \"events\";\r\nimport * as DataSourceActions from \"./DataSourceActions\";\r\n\r\nclass DataSourceStore extends EventEmitter {\r\n\r\n    constructor() {\r\n        super();\r\n        // local copy per message\r\n        this.activeDataSource = {kind: 'empty'};\r\n        this.connectionStatus = false;\r\n    }\r\n\r\n    // single handler for the app for each kind of message\r\n    handleActions(action) {\r\n        switch (action.type) {\r\n            // a cast per message\r\n            case DataSourceActions.DATA_SOURCE_UPDATED_ACTION: {\r\n                this.activeDataSource = action.value;\r\n                this.connectionStatus = true;\r\n                this.emit(\"storeUpdated\");\r\n                break;\r\n            }\r\n            case DataSourceActions.CONNECTION_STATUS_UPDATED_ACTION: {\r\n                this.connectionStatus = action.value;\r\n                this.emit(\"storeUpdated\");\r\n                break;\r\n            }\r\n            default: {\r\n            }\r\n        }\r\n    }\r\n\r\n    // a method per message\r\n    getDataSource() {\r\n        return this.activeDataSource;\r\n    }\r\n\r\n}\r\n\r\nconst dataSourceStore = new DataSourceStore();\r\ndispatcher.register(dataSourceStore.handleActions.bind(dataSourceStore));\r\nexport default dataSourceStore;\r\n","U:\\_GIT\\Universe.SqlInsights\\src\\universe.sqlinsights.w3app\\src\\index.js",[],["53","54"],"U:\\_GIT\\Universe.SqlInsights\\src\\universe.sqlinsights.w3app\\src\\stores\\DataSourceActions.js",["55"],"﻿import dispatcher from \"./DataSourceDispatcher\";\r\n\r\nexport const DATA_SOURCE_UPDATED_ACTION = \"DATA_SOURCE_UPDATED_ACTION\";\r\nexport const CONNECTION_STATUS_UPDATED_ACTION = \"CONNECTION_STATUS_UPDATED_ACTION\";\r\n\r\nexport function DataSourceUpdated(dataSource) {\r\n    dispatcher.dispatch({\r\n        type: DATA_SOURCE_UPDATED_ACTION,\r\n        value: dataSource\r\n    })\r\n}\r\n\r\nexport function ConnectionStatusUpdated(isConnected) {\r\n    dispatcher.dispatch({\r\n        type: CONNECTION_STATUS_UPDATED_ACTION,\r\n        value: isConnected\r\n    })\r\n}\r\n\r\n","U:\\_GIT\\Universe.SqlInsights\\src\\universe.sqlinsights.w3app\\src\\Shared\\ActionKeyPathUi.js",["56"],"U:\\_GIT\\Universe.SqlInsights\\src\\universe.sqlinsights.w3app\\src\\Helper.js",["57"],"﻿\r\nexport const toConsole = function(caption, obj) {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        console.log(`%c--===**** ${caption} ****===--`, \"color: #37603E\", obj);\r\n    }\r\n}\r\n\r\nexport const isDocumentHidden = () => {\r\n    // https://www.w3.org/TR/page-visibility-2/#idl-def-document-visibilitystate\r\n    let isHidden = false;\r\n    if (document && document.visibilityState && document.visibilityState !== 'visible') { isHidden = true; }\r\n    return isHidden;\r\n}\r\n\r\n\r\nexport const keyPathSeparator = {\r\n    char: '→',\r\n    code: 0x2192\r\n};\r\n\r\n","U:\\_GIT\\Universe.SqlInsights\\src\\universe.sqlinsights.w3app\\src\\Actions\\ActionList.js",["58","59","60","61","62","63"],"U:\\_GIT\\Universe.SqlInsights\\src\\universe.sqlinsights.w3app\\src\\stores\\DocumentVisibilityStore.js",["64"],"﻿import * as Helper from \"../Helper\"\r\n\r\nconst listeners = [];\r\n\r\nexport const on = listener => {\r\n    listeners.push(listener);\r\n}\r\n\r\nexport const off = listener => {\r\n    var index = listeners.indexOf(listener);\r\n    if (index !== -1) {\r\n        listeners.splice(index, 1);\r\n    }    \r\n}\r\n\r\nconst notifyAll = isVisible => {\r\n    listeners.forEach(listener => {\r\n        if (listener) listener(isVisible);\r\n    });\r\n}\r\n\r\nif (document && document.visibilityState && typeof document.onvisibilitychange !== undefined) {\r\n    console.log(\"SUBRIBING to [visibilitychange]\");\r\n    document.addEventListener(\"visibilitychange\", () => {\r\n        const isHidden = Helper.isDocumentHidden();\r\n        console.log(`VISIBLILITY: ${!isHidden}, ${document.visibilityState}`);\r\n        notifyAll(!isHidden);\r\n    }, false);\r\n}\r\nelse {\r\n    console.warn(\"Unable to SUBRIBE to document[visibilitychange]\");\r\n}\r\n",{"ruleId":"65","severity":1,"message":"66","line":1,"column":1,"nodeType":"67","messageId":"68","fix":"69"},{"ruleId":"70","severity":1,"message":"71","line":1,"column":13,"nodeType":"72","messageId":"73","endLine":1,"endColumn":19},{"ruleId":"70","severity":1,"message":"74","line":3,"column":8,"nodeType":"72","messageId":"73","endLine":3,"endColumn":23},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"65","severity":1,"message":"66","line":1,"column":1,"nodeType":"67","messageId":"68","fix":"79"},{"ruleId":"65","severity":1,"message":"66","line":1,"column":1,"nodeType":"67","messageId":"68","fix":"80"},{"ruleId":"75","replacedBy":"81"},{"ruleId":"77","replacedBy":"82"},{"ruleId":"65","severity":1,"message":"66","line":1,"column":1,"nodeType":"67","messageId":"68","fix":"83"},{"ruleId":"65","severity":1,"message":"66","line":1,"column":1,"nodeType":"67","messageId":"68","fix":"84"},{"ruleId":"65","severity":1,"message":"66","line":1,"column":1,"nodeType":"67","messageId":"68","fix":"85"},{"ruleId":"65","severity":1,"message":"66","line":1,"column":1,"nodeType":"67","messageId":"68","fix":"86"},{"ruleId":"70","severity":1,"message":"87","line":3,"column":8,"nodeType":"72","messageId":"73","endLine":3,"endColumn":23},{"ruleId":"70","severity":1,"message":"88","line":5,"column":8,"nodeType":"72","messageId":"73","endLine":5,"endColumn":13},{"ruleId":"70","severity":1,"message":"89","line":6,"column":8,"nodeType":"72","messageId":"73","endLine":6,"endColumn":18},{"ruleId":"70","severity":1,"message":"90","line":7,"column":8,"nodeType":"72","messageId":"73","endLine":7,"endColumn":24},{"ruleId":"70","severity":1,"message":"91","line":38,"column":7,"nodeType":"72","messageId":"73","endLine":38,"endColumn":16},{"ruleId":"65","severity":1,"message":"66","line":1,"column":1,"nodeType":"67","messageId":"68","fix":"92"},"unicode-bom","Unexpected Unicode BOM (Byte Order Mark).","Program","unexpected",{"range":"93","text":"94"},"no-unused-vars","'Helper' is defined but never used.","Identifier","unusedVar","'DataSourceStore' is defined but never used.","no-native-reassign",["95"],"no-negated-in-lhs",["96"],{"range":"97","text":"94"},{"range":"98","text":"94"},["95"],["96"],{"range":"99","text":"94"},{"range":"100","text":"94"},{"range":"101","text":"94"},{"range":"102","text":"94"},"'dataSourceStore' is defined but never used.","'Radio' is defined but never used.","'RadioGroup' is defined but never used.","'FormControlLabel' is defined but never used.","'useStyles' is assigned a value but never used.",{"range":"103","text":"94"},[-1,0],"","no-global-assign","no-unsafe-negation",[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0]]