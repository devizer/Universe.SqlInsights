[{"U:\\_GIT\\Universe.SqlInsights\\src\\universe.sqlinsights.w3app\\src\\stores\\DataSourceListener.js":"1","U:\\_GIT\\Universe.SqlInsights\\src\\universe.sqlinsights.w3app\\src\\stores\\DataSourceDispatcher.js":"2","U:\\_GIT\\Universe.SqlInsights\\src\\universe.sqlinsights.w3app\\src\\stores\\DataSourceStore.js":"3","U:\\_GIT\\Universe.SqlInsights\\src\\universe.sqlinsights.w3app\\src\\index.js":"4","U:\\_GIT\\Universe.SqlInsights\\src\\universe.sqlinsights.w3app\\src\\stores\\DataSourceActions.js":"5","U:\\_GIT\\Universe.SqlInsights\\src\\universe.sqlinsights.w3app\\src\\Shared\\ActionKeyPathUi.js":"6","U:\\_GIT\\Universe.SqlInsights\\src\\universe.sqlinsights.w3app\\src\\Helper.js":"7","U:\\_GIT\\Universe.SqlInsights\\src\\universe.sqlinsights.w3app\\src\\Actions\\ActionList.js":"8","U:\\_GIT\\Universe.SqlInsights\\src\\universe.sqlinsights.w3app\\src\\stores\\DocumentVisibilityStore.js":"9","U:\\_GIT\\Universe.SqlInsights\\src\\universe.sqlinsights.w3app\\src\\App.js":"10","U:\\_GIT\\Universe.SqlInsights\\src\\universe.sqlinsights.w3app\\src\\Actions\\ActionsTab.js":"11","U:\\_GIT\\Universe.SqlInsights\\src\\universe.sqlinsights.w3app\\src\\Actions\\ActionGroupsList.js":"12"},{"size":2007,"mtime":1611861873243,"results":"13","hashOfConfig":"14"},{"size":73,"mtime":1609668142844,"results":"15","hashOfConfig":"14"},{"size":1310,"mtime":1609673396507,"results":"16","hashOfConfig":"14"},{"size":500,"mtime":1609615045656,"results":"17","hashOfConfig":"14"},{"size":547,"mtime":1609673780561,"results":"18","hashOfConfig":"14"},{"size":182,"mtime":1609778154645,"results":"19","hashOfConfig":"14"},{"size":1067,"mtime":1613606764585,"results":"20","hashOfConfig":"14"},{"size":14754,"mtime":1611861101459,"results":"21","hashOfConfig":"14"},{"size":896,"mtime":1611172885961,"results":"22","hashOfConfig":"14"},{"size":352,"mtime":1611225817134,"results":"23","hashOfConfig":"14"},{"size":803,"mtime":1610099600172,"results":"24","hashOfConfig":"14"},{"size":12158,"mtime":1611622551013,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"28","usedDeprecatedRules":"29"},"dwfas7",{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"35","usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"41","usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"56","usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"59","usedDeprecatedRules":"36"},"U:\\_GIT\\Universe.SqlInsights\\src\\universe.sqlinsights.w3app\\src\\stores\\DataSourceListener.js",["60","61","62"],"﻿import * as Helper from \"../Helper\"\r\nimport * as DataSourceActions from './DataSourceActions'\r\nimport DataSourceStore from \"./DataSourceStore\";\r\n\r\n// export const API_URL=\"http://localhost:8776/SqlInsights\";\r\nexport const API_URL=\"http://localhost:50420/api/v1/SqlInsights\";\r\n// export const API_URL=\"http://localhost:56111/AppInsight\"\r\n\r\nclass DataSourceListener {\r\n\r\n    constructor() {\r\n        this.watchdogTick = this.watchdogTick.bind(this);\r\n        this.timerId = setInterval(this.watchdogTick, 1000);\r\n        \r\n        setTimeout(this.watchdogTick);\r\n\r\n/*\r\n        if (window && window.requestIdleCallback)\r\n            window.requestIdleCallback(this.watchdogTick);\r\n*/\r\n    }\r\n\r\n    watchdogTick() {\r\n        let apiUrl = `${API_URL}/Summary`;\r\n        try {\r\n            fetch(apiUrl, {method:'POST'})\r\n                .then(response => {\r\n                    // console.log(`Response.Status for ${apiUrl} obtained: ${response.status}`);\r\n                    // console.log(response);\r\n                    // console.log(response.body);\r\n                    return response.ok ? response.json() : {error: response.status, details: response.json()}\r\n                })\r\n                .then(dataSource => {\r\n                    DataSourceListener.TransformOnLoad(dataSource);\r\n                    DataSourceActions.DataSourceUpdated(dataSource);\r\n                    // console.log(\"DATA SOURCE RETRIEVED\", dataSource);\r\n                })\r\n                .catch(error => {\r\n                    console.error(error);\r\n                    // DataSourceActions.ConnectionStatusUpdated(false);\r\n                });\r\n        } catch (err) {\r\n            console.error(`FETCH failed for ${apiUrl}. ${err}`);\r\n        }\r\n    }\r\n    \r\n    static TransformOnLoad(dataSource) {\r\n        dataSource.forEach(action => {\r\n            action.KeyString = action.Key.Path.join(\" \\u2192 \");\r\n        })\r\n    }\r\n}\r\n\r\nconst dataSourceListener = new DataSourceListener();\r\nexport default dataSourceListener;\r\n",["63","64"],"U:\\_GIT\\Universe.SqlInsights\\src\\universe.sqlinsights.w3app\\src\\stores\\DataSourceDispatcher.js",["65"],"﻿import {Dispatcher} from \"flux\";\r\n\r\nexport default new Dispatcher();\r\n","U:\\_GIT\\Universe.SqlInsights\\src\\universe.sqlinsights.w3app\\src\\stores\\DataSourceStore.js",["66"],"﻿import dispatcher from \"./DataSourceDispatcher\";\r\nimport {EventEmitter} from \"events\";\r\nimport * as DataSourceActions from \"./DataSourceActions\";\r\n\r\nclass DataSourceStore extends EventEmitter {\r\n\r\n    constructor() {\r\n        super();\r\n        // local copy per message\r\n        this.activeDataSource = {kind: 'empty'};\r\n        this.connectionStatus = false;\r\n    }\r\n\r\n    // single handler for the app for each kind of message\r\n    handleActions(action) {\r\n        switch (action.type) {\r\n            // a cast per message\r\n            case DataSourceActions.DATA_SOURCE_UPDATED_ACTION: {\r\n                this.activeDataSource = action.value;\r\n                this.connectionStatus = true;\r\n                this.emit(\"storeUpdated\");\r\n                break;\r\n            }\r\n            case DataSourceActions.CONNECTION_STATUS_UPDATED_ACTION: {\r\n                this.connectionStatus = action.value;\r\n                this.emit(\"storeUpdated\");\r\n                break;\r\n            }\r\n            default: {\r\n            }\r\n        }\r\n    }\r\n\r\n    // a method per message\r\n    getDataSource() {\r\n        return this.activeDataSource;\r\n    }\r\n\r\n}\r\n\r\nconst dataSourceStore = new DataSourceStore();\r\ndispatcher.register(dataSourceStore.handleActions.bind(dataSourceStore));\r\nexport default dataSourceStore;\r\n",["67","68"],"U:\\_GIT\\Universe.SqlInsights\\src\\universe.sqlinsights.w3app\\src\\index.js",[],"U:\\_GIT\\Universe.SqlInsights\\src\\universe.sqlinsights.w3app\\src\\stores\\DataSourceActions.js",["69"],"﻿import dispatcher from \"./DataSourceDispatcher\";\r\n\r\nexport const DATA_SOURCE_UPDATED_ACTION = \"DATA_SOURCE_UPDATED_ACTION\";\r\nexport const CONNECTION_STATUS_UPDATED_ACTION = \"CONNECTION_STATUS_UPDATED_ACTION\";\r\n\r\nexport function DataSourceUpdated(dataSource) {\r\n    dispatcher.dispatch({\r\n        type: DATA_SOURCE_UPDATED_ACTION,\r\n        value: dataSource\r\n    })\r\n}\r\n\r\nexport function ConnectionStatusUpdated(isConnected) {\r\n    dispatcher.dispatch({\r\n        type: CONNECTION_STATUS_UPDATED_ACTION,\r\n        value: isConnected\r\n    })\r\n}\r\n\r\n","U:\\_GIT\\Universe.SqlInsights\\src\\universe.sqlinsights.w3app\\src\\Shared\\ActionKeyPathUi.js",["70"],"﻿\r\nexport function ActionKeyPathUi({path}) {\r\n    // return JoinString(\" \\u2192 \", path);\r\n    // console.log('ARG PATH: ', path);\r\n    return path ? path.join(\" \\u2192 \") : \"\";\r\n}","U:\\_GIT\\Universe.SqlInsights\\src\\universe.sqlinsights.w3app\\src\\Helper.js",["71"],"U:\\_GIT\\Universe.SqlInsights\\src\\universe.sqlinsights.w3app\\src\\Actions\\ActionList.js",["72","73","74","75","76","77"],"U:\\_GIT\\Universe.SqlInsights\\src\\universe.sqlinsights.w3app\\src\\stores\\DocumentVisibilityStore.js",["78"],"﻿import * as Helper from \"../Helper\"\r\n\r\nconst listeners = [];\r\n\r\nexport const on = listener => {\r\n    listeners.push(listener);\r\n}\r\n\r\nexport const off = listener => {\r\n    var index = listeners.indexOf(listener);\r\n    if (index !== -1) {\r\n        listeners.splice(index, 1);\r\n    }    \r\n}\r\n\r\nconst notifyAll = isVisible => {\r\n    listeners.forEach(listener => {\r\n        if (listener) listener(isVisible);\r\n    });\r\n}\r\n\r\nif (document && document.visibilityState && typeof document.onvisibilitychange !== undefined) {\r\n    console.log(\"SUBRIBING to [visibilitychange]\");\r\n    document.addEventListener(\"visibilitychange\", () => {\r\n        const isHidden = Helper.isDocumentHidden();\r\n        console.log(`VISIBLILITY: ${!isHidden}, ${document.visibilityState}`);\r\n        notifyAll(!isHidden);\r\n    }, false);\r\n}\r\nelse {\r\n    console.warn(\"Unable to SUBRIBE to document[visibilitychange]\");\r\n}\r\n","U:\\_GIT\\Universe.SqlInsights\\src\\universe.sqlinsights.w3app\\src\\App.js",["79","80"],"U:\\_GIT\\Universe.SqlInsights\\src\\universe.sqlinsights.w3app\\src\\Actions\\ActionsTab.js",["81","82"],"﻿import React, {Component} from \"react\";\r\nimport ActionGroupsList from \"./ActionGroupsList\";\r\nimport ActionList from \"./ActionList\";\r\n\r\nexport default class ActionsTab extends Component {\r\n    static displayName = ActionsTab.name;\r\n    \r\n    state = {\r\n        selectedAction: null,\r\n    }\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        \r\n    }\r\n    \r\n    render() {\r\n        \r\n        const onActionSelected = action => {\r\n            this.setState({selectedAction: action});\r\n        }\r\n        \r\n        return (\r\n            <React.Fragment>\r\n                <ActionGroupsList onActionSelected={onActionSelected}/>\r\n                <ActionList keyPath={this.state.selectedAction ? this.state.selectedAction.Key.Path : null} />\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n","U:\\_GIT\\Universe.SqlInsights\\src\\universe.sqlinsights.w3app\\src\\Actions\\ActionGroupsList.js",["83","84","85","86"],"﻿import * as Helper from \"../Helper\"\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport ReactTable from \"react-table\";\r\nimport \"react-table/react-table.css\";\r\n\r\nimport dataSourceStore from \"../stores/DataSourceStore\";\r\nimport {ActionKeyPathUi} from \"../Shared/ActionKeyPathUi\";\r\nimport ActionList from \"./ActionList\";\r\nimport * as DocumentVisibilityStore from \"../stores/DocumentVisibilityStore\";\r\n\r\nconst noDataProps = {style:{color:\"gray\", marginTop:30, border: \"1px solid grey\"}};\r\n\r\nexport default class ActionGroupsList extends Component {\r\n    static displayName = ActionGroupsList.name;\r\n\r\n    static propTypes = {\r\n        onActionSelected: PropTypes.func\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.updateDataSource = this.updateDataSource.bind(this);\r\n        this.handleVisibility = this.handleVisibility.bind(this);\r\n\r\n        this.state = {\r\n            actions: null,\r\n            selected: null,\r\n            selectedRow: null,\r\n            kind: 'total', // or 'average'\r\n            sorting: [{id: \"AppDuration\", desc: true}],\r\n        };\r\n    }\r\n    \r\n    handleVisibility(isVisible) {\r\n        Helper.toConsole(`handleVisibility(${isVisible})`);\r\n    }\r\n\r\n    componentDidMount()\r\n    {\r\n        let x = dataSourceStore.on('storeUpdated', this.updateDataSource);\r\n        DocumentVisibilityStore.on(this.handleVisibility);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        dataSourceStore.off('storeUpdated', this.updateDataSource);\r\n    }\r\n\r\n    updateDataSource() {\r\n        this.setState({actions: dataSourceStore.getDataSource()});\r\n    }\r\n    \r\n    render() {\r\n        const isLoaded = this.state.actions !== null;\r\n        const actions = this.state.actions === null ? [] : this.state.actions;\r\n        Helper.toConsole(`Rendering TOTAL ACTION GROUPS`, actions.length);\r\n        const handleChangeKind = (event) => {\r\n            this.setState({kind: event.target.value})\r\n        };\r\n\r\n        const onSortedChange = (newSorted, column, shiftKey) => {\r\n            // const defaultSorting = [{ id: 'totalCpuUsage_PerCents', desc: true }]\r\n            const id = newSorted[0].id;\r\n            const descDirection = id !== \"KeyString\";\r\n            const newSorting = [{ id: id, desc: descDirection }];\r\n            this.setState({sorting:newSorting});\r\n        };\r\n\r\n        let pageSize = actions.length === 0 ? 9 : Math.max(actions.length, 1);\r\n        \r\n        // const cellKeyPath = row => (<span><ActionKeyPathUi path={row.original.Key.Path} /></span>);\r\n        const cellKeyPath = row => row.original.KeyString;\r\n        \r\n        const formatNumber = time => {\r\n            let ret = time.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: time < 0 ? 0 : time < 100 ? 2 : (time < 1000 ? 1 : 0) });\r\n            return ret === \"0\" ? \"\" : ret;\r\n        };\r\n        \r\n        const isAverage = this.state.kind === \"average\";\r\n        const getCellValue = (rowData, accessor) => {\r\n            let total = accessor(rowData);\r\n            return isAverage ? total / rowData.Count : total;\r\n        };\r\n        const cellNumber = accessor => row => (<span>{formatNumber(getCellValue(row.original, accessor))}</span>);\r\n        const cellTotalErrors = row => formatNumber(row.original.RequestErrors);\r\n        \r\n\r\n        const selectedRowHandler = (state, rowInfo, column) => {\r\n            if (rowInfo && rowInfo.row) {\r\n                return {\r\n                    onClick: (e) => {\r\n                        const selectedRow = rowInfo.original;\r\n                        this.setState({\r\n                            selected: rowInfo.index,\r\n                            selectedRow: selectedRow,\r\n                        });\r\n                        Helper.toConsole(\"Action Selected\", selectedRow);\r\n                        if (this.props.onActionSelected)\r\n                            this.props.onActionSelected(selectedRow);\r\n                    },\r\n                    style: {\r\n                        background: rowInfo.index === this.state.selected ? '#4f9a94' : 'white',\r\n                        color: rowInfo.index === this.state.selected ? 'white' : 'black',\r\n                        cursor: \"pointer\",\r\n                    }\r\n                }\r\n            } else {\r\n                return {}\r\n            }\r\n        }\r\n        \r\n        const defaultMetricColumnWidth = 90;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                    <RadioGroup row aria-label=\"kind\" name=\"kind\" value={this.state.kind} onChange={handleChangeKind} className='center-aligned'>\r\n                        <div style={{textAlign: 'center', width: '100%'}}>\r\n                        <FormControlLabel control={<null />} label=\"Display:\" />\r\n                        <FormControlLabel value=\"average\" control={<Radio />} label=\"Average\" />\r\n                        <FormControlLabel value=\"total\" control={<Radio />} label=\"Total\" />\r\n                        </div>\r\n                    </RadioGroup>\r\n                <ReactTable\r\n                    data={actions}\r\n                    sorted={this.state.sorting}\r\n                    onSortedChange={onSortedChange}\r\n                    getTrProps={selectedRowHandler}\r\n                    showPagination={false}\r\n                    defaultPageSize={pageSize}\r\n                    pageSizeOptions={[pageSize]}\r\n                    pageSize={pageSize}\r\n                    noDataText={isLoaded ? \"no actions triggered\" : \"waiting for cells\"}\r\n                    getNoDataProps={() => noDataProps}\r\n                    className=\"-striped -highlight\"\r\n                    columns={\r\n                        [\r\n                            {\r\n                                Header: \"\",\r\n                                columns: [\r\n                                    {\r\n                                        Header: \"Http Endpoints & Background Tasks\",\r\n                                        accessor: \"KeyString\",\r\n                                        minWidth: 540,\r\n                                        Cell: cellKeyPath,\r\n                                    }\r\n                                ]\r\n                            },\r\n                            {\r\n                                Header: \"App Side\",\r\n                                columns: [\r\n                                    {\r\n                                        Header: \"Count\",\r\n                                        accessor: \"Count\",\r\n                                        className: 'right-aligned',\r\n                                        width: defaultMetricColumnWidth,\r\n                                    },\r\n                                    {\r\n                                        Header: \"Errors\",\r\n                                        accessor: \"RequestErrors\",\r\n                                        className: 'right-aligned',\r\n                                        width: defaultMetricColumnWidth,\r\n                                        Cell: cellTotalErrors\r\n                                    },\r\n                                    {\r\n                                        Header: \"Duration\",\r\n                                        accessor: \"AppDuration\",\r\n                                        className: 'right-aligned',\r\n                                        Cell: cellNumber(x => x.AppDuration),\r\n                                        width: defaultMetricColumnWidth,\r\n                                    },\r\n                                    {\r\n                                        Header: \"CPU\",\r\n                                        id: \"cpuUsageTotal\",\r\n                                        accessor: x => x.AppKernelUsage + x.AppUserUsage,\r\n                                        className: 'right-aligned',\r\n                                        Cell: cellNumber(x => x.AppKernelUsage + x.AppUserUsage),\r\n                                        width: defaultMetricColumnWidth,\r\n                                    },\r\n                                    {\r\n                                        Header: \"Kernel CPU\",\r\n                                        accessor: \"AppKernelUsage\",\r\n                                        className: 'right-aligned',\r\n                                        Cell: cellNumber(x => x.AppKernelUsage),\r\n                                        width: defaultMetricColumnWidth,\r\n                                    },\r\n                                    {\r\n                                        Header: \"User CPU\",\r\n                                        accessor: \"AppUserUsage\",\r\n                                        className: 'right-aligned',\r\n                                        Cell: cellNumber(x => x.AppUserUsage),\r\n                                        width: defaultMetricColumnWidth,\r\n                                    },\r\n                                ]\r\n                            },\r\n                            {\r\n                                Header: \"SQL Side\",\r\n                                columns: [\r\n                                    {\r\n                                        Header: \"Commands\",\r\n                                        accessor: \"SqlCounters.Requests\",\r\n                                        className: 'right-aligned',\r\n                                        Cell: cellNumber(x => x.SqlCounters.Requests),\r\n                                        width: defaultMetricColumnWidth,\r\n                                    },\r\n                                    {\r\n                                        Header: \"Errors\",\r\n                                        accessor: \"SqlErrors\",\r\n                                        className: 'right-aligned',\r\n                                        Cell: cellNumber(x => x.SqlErrors), // TODO: More precision for avg\r\n                                        width: defaultMetricColumnWidth,\r\n                                    },\r\n                                    {\r\n                                        Header: \"Duration\",\r\n                                        accessor: \"SqlCounters.Duration\",\r\n                                        className: 'right-aligned',\r\n                                        Cell: cellNumber(x => x.SqlCounters.Duration),\r\n                                        width: defaultMetricColumnWidth,\r\n                                    },\r\n                                    {\r\n                                        Header: \"CPU\",\r\n                                        accessor: \"SqlCounters.CPU\",\r\n                                        className: 'right-aligned',\r\n                                        Cell: cellNumber(x => x.SqlCounters.CPU),\r\n                                        width: defaultMetricColumnWidth,\r\n                                    },\r\n                                    {\r\n                                        Header: \"Reads\",\r\n                                        accessor: \"SqlCounters.Reads\",\r\n                                        className: 'right-aligned',\r\n                                        Cell: cellNumber(x => x.SqlCounters.Reads),\r\n                                        width: defaultMetricColumnWidth,\r\n                                    },\r\n                                    {\r\n                                        Header: \"Writes\",\r\n                                        accessor: \"SqlCounters.Writes\",\r\n                                        className: 'right-aligned',\r\n                                        Cell: cellNumber(x => x.SqlCounters.Writes),\r\n                                        width: defaultMetricColumnWidth,\r\n                                    },\r\n                                ]\r\n                            }\r\n                        ]\r\n                    }\r\n                />\r\n                \r\n            </React.Fragment>\r\n        );\r\n    }\r\n}   ",{"ruleId":"87","severity":1,"message":"88","line":1,"column":1,"nodeType":"89","messageId":"90","fix":"91"},{"ruleId":"92","severity":1,"message":"93","line":1,"column":13,"nodeType":"94","messageId":"95","endLine":1,"endColumn":19},{"ruleId":"92","severity":1,"message":"96","line":3,"column":8,"nodeType":"94","messageId":"95","endLine":3,"endColumn":23},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"87","severity":1,"message":"88","line":1,"column":1,"nodeType":"89","messageId":"90","fix":"101"},{"ruleId":"87","severity":1,"message":"88","line":1,"column":1,"nodeType":"89","messageId":"90","fix":"102"},{"ruleId":"97","replacedBy":"103"},{"ruleId":"99","replacedBy":"104"},{"ruleId":"87","severity":1,"message":"88","line":1,"column":1,"nodeType":"89","messageId":"90","fix":"105"},{"ruleId":"87","severity":1,"message":"88","line":1,"column":1,"nodeType":"89","messageId":"90","fix":"106"},{"ruleId":"87","severity":1,"message":"88","line":1,"column":1,"nodeType":"89","messageId":"90","fix":"107"},{"ruleId":"87","severity":1,"message":"88","line":1,"column":1,"nodeType":"89","messageId":"90","fix":"108"},{"ruleId":"92","severity":1,"message":"109","line":3,"column":8,"nodeType":"94","messageId":"95","endLine":3,"endColumn":23},{"ruleId":"92","severity":1,"message":"110","line":5,"column":8,"nodeType":"94","messageId":"95","endLine":5,"endColumn":13},{"ruleId":"92","severity":1,"message":"111","line":6,"column":8,"nodeType":"94","messageId":"95","endLine":6,"endColumn":18},{"ruleId":"92","severity":1,"message":"112","line":7,"column":8,"nodeType":"94","messageId":"95","endLine":7,"endColumn":24},{"ruleId":"92","severity":1,"message":"113","line":38,"column":7,"nodeType":"94","messageId":"95","endLine":38,"endColumn":16},{"ruleId":"87","severity":1,"message":"88","line":1,"column":1,"nodeType":"89","messageId":"90","fix":"114"},{"ruleId":"92","severity":1,"message":"115","line":2,"column":8,"nodeType":"94","messageId":"95","endLine":2,"endColumn":12},{"ruleId":"92","severity":1,"message":"116","line":5,"column":8,"nodeType":"94","messageId":"95","endLine":5,"endColumn":26},{"ruleId":"87","severity":1,"message":"88","line":1,"column":1,"nodeType":"89","messageId":"90","fix":"117"},{"ruleId":"118","severity":1,"message":"119","line":12,"column":5,"nodeType":"120","messageId":"121","endLine":15,"endColumn":6},{"ruleId":"87","severity":1,"message":"88","line":1,"column":1,"nodeType":"89","messageId":"90","fix":"122"},{"ruleId":"92","severity":1,"message":"123","line":11,"column":9,"nodeType":"94","messageId":"95","endLine":11,"endColumn":24},{"ruleId":"92","severity":1,"message":"124","line":12,"column":8,"nodeType":"94","messageId":"95","endLine":12,"endColumn":18},{"ruleId":"92","severity":1,"message":"125","line":45,"column":13,"nodeType":"94","messageId":"95","endLine":45,"endColumn":14},"unicode-bom","Unexpected Unicode BOM (Byte Order Mark).","Program","unexpected",{"range":"126","text":"127"},"no-unused-vars","'Helper' is defined but never used.","Identifier","unusedVar","'DataSourceStore' is defined but never used.","no-native-reassign",["128"],"no-negated-in-lhs",["129"],{"range":"130","text":"127"},{"range":"131","text":"127"},["128"],["129"],{"range":"132","text":"127"},{"range":"133","text":"127"},{"range":"134","text":"127"},{"range":"135","text":"127"},"'dataSourceStore' is defined but never used.","'Radio' is defined but never used.","'RadioGroup' is defined but never used.","'FormControlLabel' is defined but never used.","'useStyles' is assigned a value but never used.",{"range":"136","text":"127"},"'logo' is defined but never used.","'dataSourceListener' is defined but never used.",{"range":"137","text":"127"},"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor",{"range":"138","text":"127"},"'ActionKeyPathUi' is defined but never used.","'ActionList' is defined but never used.","'x' is assigned a value but never used.",[-1,0],"","no-global-assign","no-unsafe-negation",[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0]]